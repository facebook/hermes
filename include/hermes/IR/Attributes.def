/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/// ATTRIBUTE(valueKind, name, string)
/// \param valueKind whatever ValueKind the attribute may be attached to.
/// \param name the C++ field name of the attribute.
/// \param string the dumped string representation of the attribute.
#ifndef ATTRIBUTE
#error "ATTRIBUTE must be defined"
#endif

/// False when there might exist any unknown callsites for the Function
/// if it's in strict mode.
/// It may still be possible for callsites to be unknown if the Function's
/// in loose mode, due to Error structured stack trace.
/// However, this flag is used to indicate that it's possible to analyze
/// the Function in the absence of Error structured stack trace completely
/// and all callsites have it set as the target operand.
/// NOTE: This flag isn't to be read directly by optimization passes,
/// which is why it begins with `_`.
/// Passes should use the getters:
///   Function::allCallsitesKnown
///   Function::allCallsitesKnownExceptStructuredStackTrace
ATTRIBUTE(
    Function,
    _allCallsitesKnownInStrictMode,
    "allCallsitesKnownInStrictMode")
/// Unused.
/// TODO: Mark pure functions so they can be further optimized.
ATTRIBUTE(Function, pure, "pure")
/// Whether this is a typed SH function that has been checked.
ATTRIBUTE(Function, typed, "typed")
/// This function will never return a value (either throws or loops).
ATTRIBUTE(Function, noReturn, "noReturn")
/// This function is known to be unreachable (i.e. dead).
ATTRIBUTE(Function, unreachable, "unreachable")

/// Whether a call is known to be calling a NativeJSFunction.
/// This is used here because we currently know that _every_ user provided
/// function will be compiled to a NativeJSFunction, as we don't have special
/// calling conventions or bytecode interop in SH yet.
/// Used a short name here to take less space in IR dumps.
ATTRIBUTE(CallInst, isNativeJSFunction, "njsf")

/// Indicates that the call is known to be a call to the Metro require
/// function, which has known semantics we can assume in optimization.
ATTRIBUTE(CallInst, isMetroRequire, "metro-require")

#undef ATTRIBUTE
