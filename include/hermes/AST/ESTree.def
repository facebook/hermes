/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/// This file defines the ESTree nodes, which are documented in:
/// https://github.com/estree/estree/blob/master/spec.md
///
/// Each parameter is described by three tokens: Type, Name and Optional.

#include "hermes/AST/Config.h"

// clang-format off

// Defines the start of range of nodes with the same base
#ifndef ESTREE_FIRST
#define ESTREE_FIRST(NAME, BASE)
#endif

// Defines the end of range of nodes with the same base
#ifndef ESTREE_LAST
#define ESTREE_LAST(NAME)
#endif

// Ignores the given field if it is "empty" (e.g. nullptr, empty list).
#ifndef ESTREE_IGNORE_IF_EMPTY
#define ESTREE_IGNORE_IF_EMPTY(NODE, FIELD)
#endif

ESTREE_NODE_0_ARGS(Empty, Base)
ESTREE_NODE_0_ARGS(Metadata, Base)

ESTREE_FIRST(FunctionLike, Base)
ESTREE_NODE_1_ARGS(Program, FunctionLike,
    NodeList, body, false)
ESTREE_NODE_7_ARGS(
    FunctionExpression, FunctionLike,
    NodePtr, id, true,
    NodeList, params, false,
    NodePtr, body, false,
    NodePtr, typeParameters, true,
    NodePtr, returnType, true,
    NodeBoolean, generator, false,
    NodeBoolean, async, false)
ESTREE_IGNORE_IF_EMPTY(FunctionExpression, typeParameters)
ESTREE_IGNORE_IF_EMPTY(FunctionExpression, returnType)
ESTREE_NODE_7_ARGS(
    ArrowFunctionExpression, FunctionLike,
    NodePtr, id, true,
    NodeList, params, false,
    NodePtr, body, false,
    NodePtr, typeParameters, true,
    NodePtr, returnType, true,
    NodeBoolean, expression, false,
    NodeBoolean, async, false)
ESTREE_IGNORE_IF_EMPTY(ArrowFunctionExpression, typeParameters)
ESTREE_IGNORE_IF_EMPTY(ArrowFunctionExpression, returnType)
ESTREE_NODE_7_ARGS(
    FunctionDeclaration, FunctionLike,
    NodePtr, id, true,
    NodeList, params, false,
    NodePtr, body, false,
    NodePtr, typeParameters, true,
    NodePtr, returnType, true,
    NodeBoolean, generator, false,
    NodeBoolean, async, false)
ESTREE_IGNORE_IF_EMPTY(FunctionDeclaration, typeParameters)
ESTREE_IGNORE_IF_EMPTY(FunctionDeclaration, returnType)
ESTREE_LAST(FunctionLike)

ESTREE_FIRST(Statement, Base)

ESTREE_FIRST(LoopStatement, Statement)
ESTREE_NODE_2_ARGS(
    WhileStatement,
    LoopStatement,
    NodePtr,
    body,
    false,
    NodePtr,
    test,
    false)
ESTREE_NODE_2_ARGS(
    DoWhileStatement,
    LoopStatement,
    NodePtr,
    body,
    false,
    NodePtr,
    test,
    false)
ESTREE_NODE_3_ARGS(
    ForInStatement,
    LoopStatement,
    NodePtr,
    left,
    false,
    NodePtr,
    right,
    false,
    NodePtr,
    body,
    false)
ESTREE_NODE_3_ARGS(
    ForOfStatement,
    LoopStatement,
    NodePtr,
    left,
    false,
    NodePtr,
    right,
    false,
    NodePtr,
    body,
    false)
ESTREE_NODE_4_ARGS(
    ForStatement,
    LoopStatement,
    NodePtr,
    init,
    true,
    NodePtr,
    test,
    true,
    NodePtr,
    update,
    true,
    NodePtr,
    body,
    true)
ESTREE_LAST(LoopStatement)

ESTREE_NODE_0_ARGS(DebuggerStatement, Statement)
ESTREE_NODE_0_ARGS(EmptyStatement, Statement)
ESTREE_NODE_1_ARGS(BlockStatement, Statement, NodeList, body, false)
ESTREE_NODE_1_ARGS(BreakStatement, Statement, NodePtr, label, true)
ESTREE_NODE_1_ARGS(ContinueStatement, Statement, NodePtr, label, true)
ESTREE_NODE_1_ARGS(ThrowStatement, Statement, NodePtr, argument, false)
ESTREE_NODE_1_ARGS(ReturnStatement, Statement, NodePtr, argument, true)
ESTREE_NODE_2_ARGS(
    WithStatement,
    Statement,
    NodePtr,
    object,
    false,
    NodePtr,
    body,
    false)

ESTREE_NODE_2_ARGS(
    SwitchStatement,
    Statement,
    NodePtr,
    discriminant,
    false,
    NodeList,
    cases,
    false)

ESTREE_NODE_2_ARGS(
    LabeledStatement,
    Statement,
    NodePtr,
    label,
    false,
    NodePtr,
    body,
    false)

ESTREE_NODE_2_ARGS(
    ExpressionStatement,
    Statement,
    NodePtr,
    expression,
    false,
    NodeLabel,
    directive,
    true)

ESTREE_NODE_3_ARGS(
    TryStatement,
    Statement,
    NodePtr,
    block,
    false,
    NodePtr,
    handler,
    true,
    NodePtr,
    finalizer,
    true)

ESTREE_NODE_3_ARGS(
    IfStatement,
    Statement,
    NodePtr,
    test,
    false,
    NodePtr,
    consequent,
    false,
    NodePtr,
    alternate,
    true)

ESTREE_LAST(Statement)

ESTREE_NODE_0_ARGS(NullLiteral, Base)
ESTREE_NODE_1_ARGS(BooleanLiteral, Base, NodeBoolean, value, false)
ESTREE_NODE_1_ARGS(StringLiteral, Base, NodeLabel, value, false)
ESTREE_NODE_1_ARGS(NumericLiteral, Base, NodeNumber, value, false)
ESTREE_NODE_2_ARGS(
    RegExpLiteral,
    Base,
    NodeLabel,
    pattern,
    false,
    NodeLabel,
    flags,
    false)

ESTREE_NODE_0_ARGS(ThisExpression, Base)
ESTREE_NODE_0_ARGS(Super, Base)
ESTREE_NODE_0_ARGS(Import, Base)
ESTREE_NODE_1_ARGS(SequenceExpression, Base, NodeList, expressions, false)
ESTREE_NODE_1_ARGS(ObjectExpression, Base, NodeList, properties, false)
ESTREE_NODE_2_ARGS(ArrayExpression, Base,
    NodeList, elements, false,
    NodeBoolean, trailingComma, false)

ESTREE_NODE_1_ARGS(
    SpreadElement, Base,
    NodePtr, argument, false)

ESTREE_NODE_2_ARGS(
    NewExpression,
    Base,
    NodePtr,
    callee,
    false,
    NodeList,
    arguments,
    false)
ESTREE_NODE_2_ARGS(
    YieldExpression, Base,
    NodePtr, argument, true,
    NodeBoolean, delegate, true)
ESTREE_NODE_1_ARGS(
    AwaitExpression, Base,
    NodePtr, argument, false)

ESTREE_FIRST(CallExpressionLike, Base)
ESTREE_NODE_3_ARGS(
    CallExpression, CallExpressionLike,
    NodePtr, callee, false,
    NodePtr, typeArguments, true,
    NodeList, arguments, false)
ESTREE_IGNORE_IF_EMPTY(CallExpression, typeArguments)

ESTREE_NODE_4_ARGS(
    OptionalCallExpression, CallExpressionLike,
    NodePtr, callee, false,
    NodePtr, typeArguments, true,
    NodeList, arguments, false,
    NodeBoolean, optional, false)
ESTREE_IGNORE_IF_EMPTY(OptionalCallExpression, typeArguments)
ESTREE_LAST(CallExpressionLike)

ESTREE_NODE_3_ARGS(
    AssignmentExpression,
    Base,
    NodeLabel,
    operator,
    false,
    NodePtr,
    left,
    true,
    NodePtr,
    right,
    true)

ESTREE_NODE_3_ARGS(
    UnaryExpression,
    Base,
    NodeLabel,
    operator,
    false,
    NodePtr,
    argument,
    false,
    NodeBoolean,
    prefix,
    false)

ESTREE_NODE_3_ARGS(
    UpdateExpression,
    Base,
    NodeLabel,
    operator,
    false,
    NodePtr,
    argument,
    false,
    NodeBoolean,
    prefix,
    false)

ESTREE_FIRST(MemberExpressionLike, Base)
ESTREE_NODE_3_ARGS(
    MemberExpression, MemberExpressionLike,
    NodePtr, object, false,
    NodePtr, property, false,
    NodeBoolean, computed, false)

ESTREE_NODE_4_ARGS(
    OptionalMemberExpression, MemberExpressionLike,
    NodePtr, object, false,
    NodePtr, property, false,
    NodeBoolean, computed, false,
    NodeBoolean, optional, false)
ESTREE_LAST(MemberExpressionLike)

ESTREE_NODE_3_ARGS(
    LogicalExpression,
    Base,
    NodePtr,
    left,
    false,
    NodePtr,
    right,
    false,
    NodeLabel,
    operator,
    false)

ESTREE_NODE_3_ARGS(
    ConditionalExpression,
    Base,
    NodePtr,
    test,
    false,
    NodePtr,
    alternate,
    false,
    NodePtr,
    consequent,
    false)

ESTREE_NODE_3_ARGS(
    BinaryExpression,
    Base,
    NodePtr,
    left,
    false,
    NodePtr,
    right,
    false,
    NodeLabel,
    operator,
    false)

ESTREE_NODE_1_ARGS(Directive, Base, NodePtr, value, false)
ESTREE_NODE_1_ARGS(DirectiveLiteral, Base, NodeLabel, value, false)

ESTREE_NODE_2_ARGS(
    Identifier,
    Base,
    NodeLabel,
    name,
    false,
    NodePtr,
    typeAnnotation,
    true)
ESTREE_IGNORE_IF_EMPTY(Identifier, typeAnnotation)

ESTREE_NODE_2_ARGS(
    MetaProperty,
    Base,
    NodePtr,
    meta,
    false,
    NodePtr,
    property,
    false)

ESTREE_NODE_2_ARGS(
    SwitchCase,
    Base,
    NodePtr,
    test,
    true,
    NodeList,
    consequent,
    false)

ESTREE_NODE_2_ARGS(
    CatchClause,
    Base,
    NodePtr,
    param,
    true,
    NodePtr,
    body,
    false)

ESTREE_NODE_2_ARGS(
    VariableDeclarator,
    Base,
    NodePtr,
    init,
    true,
    NodePtr,
    id,
    false)

ESTREE_NODE_2_ARGS(
    VariableDeclaration,
    Base,
    NodeLabel,
    kind,
    false,
    NodeList,
    declarations,
    false)

ESTREE_NODE_2_ARGS(TemplateLiteral, Base,
                   NodeList, quasis, false,
                   NodeList, expressions, false)

ESTREE_NODE_2_ARGS(TaggedTemplateExpression, Base,
                   NodePtr, tag, false,
                   NodePtr, quasi, false)

// In ESTree, it is defined as {tail : boolean,
//                              value : {cooked : string, raw : string}},
// we flatten the value field.
// If the template literal is tagged and the text has an invalid escape,
// cooked will be null.
ESTREE_NODE_3_ARGS(TemplateElement, Base,
                   NodeBoolean, tail, false,
                   NodeLabel, cooked, true,
                   NodeLabel, raw, false)

ESTREE_NODE_4_ARGS(
    Property, Base,
    NodePtr, key, false,
    NodePtr, value, false,
    NodeLabel, kind, false,
    NodeBoolean, computed, false)

ESTREE_NODE_7_ARGS(
    ClassDeclaration, Base,
    NodePtr, id, true,
    NodePtr, typeParameters, true,
    NodePtr, superClass, true,
    NodePtr, superTypeParameters, true,
    NodeList, implements, false,
    NodeList, decorators, false,
    NodePtr, body, false)
ESTREE_IGNORE_IF_EMPTY(ClassDeclaration, typeParameters)
ESTREE_IGNORE_IF_EMPTY(ClassDeclaration, superTypeParameters)
ESTREE_IGNORE_IF_EMPTY(ClassDeclaration, implements)
ESTREE_IGNORE_IF_EMPTY(ClassDeclaration, decorators)

ESTREE_NODE_7_ARGS(
    ClassExpression, Base,
    NodePtr, id, true,
    NodePtr, typeParameters, true,
    NodePtr, superClass, true,
    NodePtr, superTypeParameters, true,
    NodeList, implements, false,
    NodeList, decorators, false,
    NodePtr, body, false)
ESTREE_IGNORE_IF_EMPTY(ClassExpression, typeParameters)
ESTREE_IGNORE_IF_EMPTY(ClassExpression, superTypeParameters)
ESTREE_IGNORE_IF_EMPTY(ClassExpression, implements)
ESTREE_IGNORE_IF_EMPTY(ClassExpression, decorators)

ESTREE_NODE_1_ARGS(
    ClassBody, Base,
    NodeList, body, false)

ESTREE_NODE_6_ARGS(
    ClassProperty, Base,
    NodePtr, key, false,
    NodePtr, value, true,
    NodeBoolean, computed, false,
    NodeBoolean, static, false,
    NodePtr, variance, true,
    NodePtr, typeAnnotation, true)
ESTREE_IGNORE_IF_EMPTY(ClassProperty, variance)
ESTREE_IGNORE_IF_EMPTY(ClassProperty, typeAnnotation)

ESTREE_NODE_5_ARGS(
    MethodDefinition, Base,
    NodePtr, key, false,
    NodePtr, value, false,
    NodeLabel, kind, false,
    NodeBoolean, computed, false,
    NodeBoolean, static, false)

// Imports ========================================

ESTREE_NODE_3_ARGS(
    ImportDeclaration, Base,
    NodeList, specifiers, false,
    NodePtr, source, false,
    NodeLabel, importKind, false)

ESTREE_NODE_3_ARGS(
    ImportSpecifier, Base,
    NodePtr, imported, false,
    NodePtr, local, false,
    NodeLabel, importKind, false)
ESTREE_NODE_1_ARGS(
    ImportDefaultSpecifier, Base,
    NodePtr, local, false)
ESTREE_NODE_1_ARGS(
    ImportNamespaceSpecifier, Base,
    NodePtr, local, false)

// ================================================

// Exports ========================================

ESTREE_NODE_4_ARGS(
    ExportNamedDeclaration, Base,
    NodePtr, declaration, true,
    NodeList, specifiers, false,
    NodePtr, source, true,
    NodeLabel, exportKind, false)

ESTREE_NODE_2_ARGS(
    ExportSpecifier, Base,
    NodePtr, exported, false,
    NodePtr, local, false)
ESTREE_NODE_1_ARGS(
    ExportDefaultDeclaration, Base,
    NodePtr, declaration, false)
ESTREE_NODE_2_ARGS(
    ExportAllDeclaration, Base,
    NodePtr, source, false,
    NodeLabel, exportKind, false)

// ================================================

// Patterns =======================================
ESTREE_FIRST(Pattern, Base)

ESTREE_NODE_2_ARGS(
    ObjectPattern, Pattern,
    NodeList, properties, false,
    NodePtr, typeAnnotation, true)
ESTREE_IGNORE_IF_EMPTY(ObjectPattern, typeAnnotation)

ESTREE_NODE_2_ARGS(
    ArrayPattern, Pattern,
    NodeList, elements, false,
    NodePtr, typeAnnotation, true)
ESTREE_IGNORE_IF_EMPTY(ArrayPattern, typeAnnotation)

ESTREE_NODE_1_ARGS(
    RestElement, Pattern,
    NodePtr, argument, false)

ESTREE_NODE_2_ARGS(
    AssignmentPattern, Pattern,
    NodePtr, left, false,          // Pattern
    NodePtr, right, false)         // Expression

ESTREE_LAST(Pattern)
// ================================================

// JSX ============================================

#if HERMES_PARSE_JSX

ESTREE_NODE_1_ARGS(
    JSXIdentifier, Base,
    NodeLabel, name, false)
ESTREE_NODE_2_ARGS(
    JSXMemberExpression, Base,
    NodePtr, object, false,
    NodePtr, property, false)
ESTREE_NODE_2_ARGS(
    JSXNamespacedName, Base,
    NodePtr, namespace, false,
    NodePtr, name, false)

ESTREE_NODE_0_ARGS(
    JSXEmptyExpression, Base)
ESTREE_NODE_1_ARGS(
    JSXExpressionContainer, Base,
    NodePtr, expression, false)
ESTREE_NODE_1_ARGS(
    JSXSpreadChild, Base,
    NodePtr, expression, false)

ESTREE_NODE_3_ARGS(
    JSXOpeningElement, Base,
    NodePtr, name, false,
    NodeList, attributes, false,
    NodeBoolean, selfClosing, false)
ESTREE_NODE_1_ARGS(
    JSXClosingElement, Base,
    NodePtr, name, false)

ESTREE_NODE_2_ARGS(
    JSXAttribute, Base,
    NodePtr, name, false,
    NodePtr, value, true)
ESTREE_NODE_1_ARGS(
    JSXSpreadAttribute, Base,
    NodePtr, argument, false)

ESTREE_NODE_2_ARGS(
    JSXText, Base,
    NodeLabel, value, false,
    NodeLabel, raw, false)

ESTREE_NODE_3_ARGS(
    JSXElement, Base,
    NodePtr, openingElement, false,
    NodeList, children, false,
    NodePtr, closingElement, true)

ESTREE_NODE_3_ARGS(
    JSXFragment, Base,
    NodePtr, openingFragment, false,
    NodeList, children, false,
    NodePtr, closingFragment, false)
ESTREE_NODE_0_ARGS(
    JSXOpeningFragment, Base)
ESTREE_NODE_0_ARGS(
    JSXClosingFragment, Base)

#endif

// ================================================

// Types ==========================================

#if HERMES_PARSE_FLOW

ESTREE_NODE_0_ARGS(ExistsTypeAnnotation, Base)
ESTREE_NODE_0_ARGS(EmptyTypeAnnotation, Base)
ESTREE_NODE_0_ARGS(StringTypeAnnotation, Base)
ESTREE_NODE_0_ARGS(NumberTypeAnnotation, Base)
ESTREE_NODE_2_ARGS(
    NumberLiteralTypeAnnotation, Base,
    NodeNumber, value, false,
    NodeLabel, raw, false)
ESTREE_NODE_0_ARGS(BooleanTypeAnnotation, Base)
ESTREE_NODE_2_ARGS(
    BooleanLiteralTypeAnnotation, Base,
    NodeBoolean, value, false,
    NodeLabel, raw, false)
ESTREE_NODE_0_ARGS(NullLiteralTypeAnnotation, Base)
ESTREE_NODE_0_ARGS(AnyTypeAnnotation, Base)
ESTREE_NODE_0_ARGS(VoidTypeAnnotation, Base)
ESTREE_NODE_4_ARGS(
    FunctionTypeAnnotation, Base,
    NodeList, params, false,
    NodePtr, returnType, false,
    NodePtr, rest, true,
    NodePtr, typeParameters, true)
ESTREE_NODE_3_ARGS(
    FunctionTypeParam, Base,
    NodePtr, name, true,
    NodePtr, typeAnnotation, false,
    NodeBoolean, optional, false)
ESTREE_NODE_1_ARGS(
    NullableTypeAnnotation, Base,
    NodePtr, typeAnnotation, false)
ESTREE_NODE_2_ARGS(
    QualifiedTypeIdentifier, Base,
    NodePtr, qualification, false,
    NodePtr, id, false)

ESTREE_NODE_1_ARGS(
    TypeofTypeAnnotation, Base,
    NodePtr, argument, false)
ESTREE_NODE_1_ARGS(
    TupleTypeAnnotation, Base,
    NodeList, types, false)
ESTREE_NODE_1_ARGS(
    ArrayTypeAnnotation, Base,
    NodePtr, elementType, false)
ESTREE_NODE_1_ARGS(
    UnionTypeAnnotation, Base,
    NodeList, types, false)
ESTREE_NODE_1_ARGS(
    IntersectionTypeAnnotation, Base,
    NodeList, types, false)
ESTREE_NODE_2_ARGS(
    GenericTypeAnnotation, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true)

ESTREE_NODE_2_ARGS(
    InterfaceTypeAnnotation, Base,
    NodeList, extends, false,
    NodePtr, body, true)

ESTREE_NODE_3_ARGS(
    TypeAlias, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodePtr, right, false)
ESTREE_NODE_4_ARGS(
    OpaqueType, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodePtr, impltype, false,
    NodePtr, supertype, true)

ESTREE_NODE_4_ARGS(
    InterfaceDeclaration, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodeList, extends, false,
    NodePtr, body, false)

ESTREE_NODE_3_ARGS(
    DeclareTypeAlias, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodePtr, right, false)
ESTREE_NODE_4_ARGS(
    DeclareOpaqueType, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodePtr, impltype, true,
    NodePtr, supertype, true)
ESTREE_NODE_4_ARGS(
    DeclareInterface, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodeList, extends, false,
    NodePtr, body, false)
ESTREE_NODE_6_ARGS(
    DeclareClass, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true,
    NodeList, extends, false,
    NodeList, implements, false,
    NodeList, mixins, false,
    NodePtr, body, false)
ESTREE_NODE_2_ARGS(
    DeclareFunction, Base,
    NodePtr, id, false,
    NodePtr, predicate, true)
ESTREE_NODE_1_ARGS(
    DeclareVariable, Base,
    NodePtr, id, false)
ESTREE_NODE_4_ARGS(
    DeclareExportDeclaration, Base,
    NodePtr, declaration, true,
    NodeList, specifiers, false,
    NodePtr, source, true,
    NodeBoolean, default, false)
ESTREE_NODE_1_ARGS(
    DeclareExportAllDeclaration, Base,
    NodePtr, source, false)
ESTREE_NODE_3_ARGS(
    DeclareModule, Base,
    NodePtr, id, false,
    NodePtr, body, false,
    NodeLabel, kind, false)
ESTREE_NODE_1_ARGS(
    DeclareModuleExports, Base,
    NodePtr, typeAnnotation, false)

ESTREE_NODE_2_ARGS(
    InterfaceExtends, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true)

ESTREE_NODE_2_ARGS(
    ClassImplements, Base,
    NodePtr, id, false,
    NodePtr, typeParameters, true)

ESTREE_NODE_1_ARGS(
    TypeAnnotation, Base,
    NodePtr, typeAnnotation, false)

ESTREE_NODE_6_ARGS(
    ObjectTypeAnnotation, Base,
    NodeList, properties, false,
    NodeList, indexers, false,
    NodeList, callProperties, false,
    NodeList, internalSlots, false,
    NodeBoolean, inexact, false,
    NodeBoolean, exact, false)
ESTREE_NODE_8_ARGS(
    ObjectTypeProperty, Base,
    NodePtr, key, false,
    NodePtr, value, false,
    NodeBoolean, method, false,
    NodeBoolean, optional, false,
    NodeBoolean, static, false,
    NodeBoolean, proto, false,
    NodePtr, variance, true,
    NodeLabel, kind, false)
ESTREE_NODE_1_ARGS(
    ObjectTypeSpreadProperty, Base,
    NodePtr, argument, false)
ESTREE_NODE_5_ARGS(
    ObjectTypeInternalSlot, Base,
    NodePtr, id, false,
    NodePtr, value, false,
    NodeBoolean, optional, false,
    NodeBoolean, static, false,
    NodeBoolean, method, false)
ESTREE_NODE_2_ARGS(
    ObjectTypeCallProperty, Base,
    NodePtr, value, false,
    NodeBoolean, static, false)
ESTREE_NODE_5_ARGS(
    ObjectTypeIndexer, Base,
    NodePtr, id, true,
    NodePtr, key, false,
    NodePtr, value, false,
    NodeBoolean, static, false,
    NodePtr, variance, true)

ESTREE_NODE_1_ARGS(
    Variance, Base,
    NodeLabel, kind, false)

ESTREE_NODE_1_ARGS(
    TypeParameterDeclaration, Base,
    NodeList, params, false)
ESTREE_NODE_4_ARGS(
    TypeParameter, Base,
    NodeLabel, name, false,
    NodePtr, bound, true,
    NodePtr, variance, true,
    NodePtr, default, true)
ESTREE_NODE_1_ARGS(
    TypeParameterInstantiation, Base,
    NodeList, params, false)

ESTREE_NODE_2_ARGS(
    TypeCastExpression, Base,
    NodePtr, expression, false,
    NodePtr, typeAnnotation, false)

ESTREE_NODE_0_ARGS(InferredPredicate, Base)
ESTREE_NODE_1_ARGS(
    DeclaredPredicate, Base,
    NodePtr, value, false)

ESTREE_NODE_2_ARGS(
    EnumDeclaration, Base,
    NodePtr, id, false,
    NodePtr, body, false)

ESTREE_NODE_2_ARGS(
    EnumStringBody, Base,
    NodeList, members, false,
    NodeBoolean, explicitType, false)
ESTREE_NODE_2_ARGS(
    EnumNumberBody, Base,
    NodeList, members, false,
    NodeBoolean, explicitType, false)
ESTREE_NODE_2_ARGS(
    EnumBooleanBody, Base,
    NodeList, members, false,
    NodeBoolean, explicitType, false)
ESTREE_NODE_1_ARGS(
    EnumSymbolBody, Base,
    NodeList, members, false)

ESTREE_NODE_1_ARGS(
    EnumDefaultedMember, Base,
    NodePtr, id, false)
ESTREE_NODE_2_ARGS(
    EnumStringMember, Base,
    NodePtr, id, false,
    NodePtr, init, false)
ESTREE_NODE_2_ARGS(
    EnumNumberMember, Base,
    NodePtr, id, false,
    NodePtr, init, false)
ESTREE_NODE_2_ARGS(
    EnumBooleanMember, Base,
    NodePtr, id, false,
    NodeBoolean, init, false)

#endif

// ================================================

ESTREE_FIRST(Cover, Base)

// CoverParenthesizedExpressionAndArrowParameterList: "(" ")"
ESTREE_NODE_0_ARGS(CoverEmptyArgs, Cover)

// CoverParenthesizedExpressionAndArrowParameterList:
//      "(" Expression "," ")"
// This is the dummy "empty expression" for the last comma inside a
// SequenceExpression.
ESTREE_NODE_0_ARGS(CoverTrailingComma, Cover)

// CoverInitializer
// This is used for destructuring object assignment with initializers. It
// will be the value node of a Property.
ESTREE_NODE_1_ARGS(
    CoverInitializer, Cover,
    NodePtr, init, false)

// CoverRestElement
// This is used for parsing "...elem" in "()" and in SequenceExpression, so it
// can later be reparsed as an arrow function rest parameter. "rest" will point
// to the actual RestElement.
ESTREE_NODE_1_ARGS(
    CoverRestElement, Cover,
    NodePtr, rest, false)

// CoverTypedIdentifier
// This is used for parsing "ident: type" as either a type cast expression
// or a typed parameter in the parameters list of an arrow function.
// 'left' is the identifier which is typed.
// 'right' is the type which is either the cast target or the type annotation,
//   which may be null if the identifier was simply given a '?' and no ':'
//   with a type annotation.
ESTREE_NODE_2_ARGS(
    CoverTypedIdentifier, Cover,
    NodePtr, left, false,
    NodePtr, right, true)

ESTREE_LAST(Cover)

#undef ESTREE_FIRST
#undef ESTREE_LAST
#undef ESTREE_WRAP
#undef ESTREE_IGNORE_IF_EMPTY

#undef ESTREE_NODE_0_ARGS
#undef ESTREE_NODE_1_ARGS
#undef ESTREE_NODE_2_ARGS
#undef ESTREE_NODE_3_ARGS
#undef ESTREE_NODE_4_ARGS
#undef ESTREE_NODE_5_ARGS
#undef ESTREE_NODE_6_ARGS
#undef ESTREE_NODE_7_ARGS
#undef ESTREE_NODE_8_ARGS
