/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by Hermes rustgen
// DO NOT EDIT

use super::node::*;

#[repr(u32)]
#[derive(Debug, PartialEq)]
pub enum NodeKind {
    Empty,
    Metadata,
    _FunctionLikeFirst,
    Program,
    FunctionExpression,
    ArrowFunctionExpression,
    FunctionDeclaration,
    _FunctionLikeLast,
    _StatementFirst,
    _LoopStatementFirst,
    WhileStatement,
    DoWhileStatement,
    ForInStatement,
    ForOfStatement,
    ForStatement,
    _LoopStatementLast,
    DebuggerStatement,
    EmptyStatement,
    BlockStatement,
    BreakStatement,
    ContinueStatement,
    ThrowStatement,
    ReturnStatement,
    WithStatement,
    SwitchStatement,
    LabeledStatement,
    ExpressionStatement,
    TryStatement,
    IfStatement,
    _StatementLast,
    NullLiteral,
    BooleanLiteral,
    StringLiteral,
    NumericLiteral,
    RegExpLiteral,
    BigIntLiteral,
    ThisExpression,
    Super,
    SequenceExpression,
    ObjectExpression,
    ArrayExpression,
    SpreadElement,
    NewExpression,
    YieldExpression,
    AwaitExpression,
    ImportExpression,
    _CallExpressionLikeFirst,
    CallExpression,
    OptionalCallExpression,
    _CallExpressionLikeLast,
    AssignmentExpression,
    UnaryExpression,
    UpdateExpression,
    _MemberExpressionLikeFirst,
    MemberExpression,
    OptionalMemberExpression,
    _MemberExpressionLikeLast,
    LogicalExpression,
    ConditionalExpression,
    BinaryExpression,
    Directive,
    DirectiveLiteral,
    Identifier,
    PrivateName,
    MetaProperty,
    SwitchCase,
    CatchClause,
    VariableDeclarator,
    VariableDeclaration,
    TemplateLiteral,
    TaggedTemplateExpression,
    TemplateElement,
    Property,
    ClassDeclaration,
    ClassExpression,
    ClassBody,
    ClassProperty,
    ClassPrivateProperty,
    MethodDefinition,
    ImportDeclaration,
    ImportSpecifier,
    ImportDefaultSpecifier,
    ImportNamespaceSpecifier,
    ImportAttribute,
    ExportNamedDeclaration,
    ExportSpecifier,
    ExportNamespaceSpecifier,
    ExportDefaultDeclaration,
    ExportAllDeclaration,
    _PatternFirst,
    ObjectPattern,
    ArrayPattern,
    RestElement,
    AssignmentPattern,
    _PatternLast,
    JSXIdentifier,
    JSXMemberExpression,
    JSXNamespacedName,
    JSXEmptyExpression,
    JSXExpressionContainer,
    JSXSpreadChild,
    JSXOpeningElement,
    JSXClosingElement,
    JSXAttribute,
    JSXSpreadAttribute,
    JSXStringLiteral,
    JSXText,
    JSXElement,
    JSXFragment,
    JSXOpeningFragment,
    JSXClosingFragment,
    ExistsTypeAnnotation,
    EmptyTypeAnnotation,
    StringTypeAnnotation,
    NumberTypeAnnotation,
    StringLiteralTypeAnnotation,
    NumberLiteralTypeAnnotation,
    BigIntLiteralTypeAnnotation,
    BooleanTypeAnnotation,
    BooleanLiteralTypeAnnotation,
    NullLiteralTypeAnnotation,
    SymbolTypeAnnotation,
    AnyTypeAnnotation,
    MixedTypeAnnotation,
    VoidTypeAnnotation,
    FunctionTypeAnnotation,
    FunctionTypeParam,
    NullableTypeAnnotation,
    QualifiedTypeIdentifier,
    TypeofTypeAnnotation,
    TupleTypeAnnotation,
    ArrayTypeAnnotation,
    UnionTypeAnnotation,
    IntersectionTypeAnnotation,
    GenericTypeAnnotation,
    IndexedAccessType,
    OptionalIndexedAccessType,
    InterfaceTypeAnnotation,
    TypeAlias,
    OpaqueType,
    InterfaceDeclaration,
    DeclareTypeAlias,
    DeclareOpaqueType,
    DeclareInterface,
    DeclareClass,
    DeclareFunction,
    DeclareVariable,
    DeclareExportDeclaration,
    DeclareExportAllDeclaration,
    DeclareModule,
    DeclareModuleExports,
    InterfaceExtends,
    ClassImplements,
    TypeAnnotation,
    ObjectTypeAnnotation,
    ObjectTypeProperty,
    ObjectTypeSpreadProperty,
    ObjectTypeInternalSlot,
    ObjectTypeCallProperty,
    ObjectTypeIndexer,
    Variance,
    TypeParameterDeclaration,
    TypeParameter,
    TypeParameterInstantiation,
    TypeCastExpression,
    InferredPredicate,
    DeclaredPredicate,
    EnumDeclaration,
    EnumStringBody,
    EnumNumberBody,
    EnumBooleanBody,
    EnumSymbolBody,
    EnumDefaultedMember,
    EnumStringMember,
    EnumNumberMember,
    EnumBooleanMember,
    TSTypeAnnotation,
    TSAnyKeyword,
    TSNumberKeyword,
    TSBooleanKeyword,
    TSStringKeyword,
    TSSymbolKeyword,
    TSVoidKeyword,
    TSThisType,
    TSLiteralType,
    TSIndexedAccessType,
    TSArrayType,
    TSTypeReference,
    TSQualifiedName,
    TSFunctionType,
    TSConstructorType,
    TSTypePredicate,
    TSTupleType,
    TSTypeAssertion,
    TSAsExpression,
    TSParameterProperty,
    TSTypeAliasDeclaration,
    TSInterfaceDeclaration,
    TSInterfaceHeritage,
    TSInterfaceBody,
    TSEnumDeclaration,
    TSEnumMember,
    TSModuleDeclaration,
    TSModuleBlock,
    TSModuleMember,
    TSTypeParameterDeclaration,
    TSTypeParameter,
    TSTypeParameterInstantiation,
    TSUnionType,
    TSIntersectionType,
    TSTypeQuery,
    TSConditionalType,
    TSTypeLiteral,
    TSPropertySignature,
    TSMethodSignature,
    TSIndexSignature,
    TSCallSignatureDeclaration,
    _CoverFirst,
    CoverEmptyArgs,
    CoverTrailingComma,
    CoverInitializer,
    CoverRestElement,
    CoverTypedIdentifier,
    _CoverLast,
}

extern "C" {
    // Program
    pub fn hermes_get_Program_body(node: NodePtr) -> NodeListRef;
    // FunctionExpression
    pub fn hermes_get_FunctionExpression_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionExpression_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_FunctionExpression_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_FunctionExpression_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionExpression_returnType(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionExpression_predicate(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionExpression_generator(node: NodePtr) -> bool;
    pub fn hermes_get_FunctionExpression_async(node: NodePtr) -> bool;
    // ArrowFunctionExpression
    pub fn hermes_get_ArrowFunctionExpression_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ArrowFunctionExpression_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ArrowFunctionExpression_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ArrowFunctionExpression_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ArrowFunctionExpression_returnType(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ArrowFunctionExpression_predicate(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ArrowFunctionExpression_expression(node: NodePtr) -> bool;
    pub fn hermes_get_ArrowFunctionExpression_async(node: NodePtr) -> bool;
    // FunctionDeclaration
    pub fn hermes_get_FunctionDeclaration_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionDeclaration_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_FunctionDeclaration_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_FunctionDeclaration_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionDeclaration_returnType(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionDeclaration_predicate(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionDeclaration_generator(node: NodePtr) -> bool;
    pub fn hermes_get_FunctionDeclaration_async(node: NodePtr) -> bool;
    // WhileStatement
    pub fn hermes_get_WhileStatement_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_WhileStatement_test(node: NodePtr) -> NodePtr;
    // DoWhileStatement
    pub fn hermes_get_DoWhileStatement_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DoWhileStatement_test(node: NodePtr) -> NodePtr;
    // ForInStatement
    pub fn hermes_get_ForInStatement_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ForInStatement_right(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ForInStatement_body(node: NodePtr) -> NodePtr;
    // ForOfStatement
    pub fn hermes_get_ForOfStatement_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ForOfStatement_right(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ForOfStatement_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ForOfStatement_await(node: NodePtr) -> bool;
    // ForStatement
    pub fn hermes_get_ForStatement_init(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ForStatement_test(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ForStatement_update(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ForStatement_body(node: NodePtr) -> NodePtr;
    // BlockStatement
    pub fn hermes_get_BlockStatement_body(node: NodePtr) -> NodeListRef;
    // BreakStatement
    pub fn hermes_get_BreakStatement_label(node: NodePtr) -> NodePtrOpt;
    // ContinueStatement
    pub fn hermes_get_ContinueStatement_label(node: NodePtr) -> NodePtrOpt;
    // ThrowStatement
    pub fn hermes_get_ThrowStatement_argument(node: NodePtr) -> NodePtr;
    // ReturnStatement
    pub fn hermes_get_ReturnStatement_argument(node: NodePtr) -> NodePtrOpt;
    // WithStatement
    pub fn hermes_get_WithStatement_object(node: NodePtr) -> NodePtr;
    pub fn hermes_get_WithStatement_body(node: NodePtr) -> NodePtr;
    // SwitchStatement
    pub fn hermes_get_SwitchStatement_discriminant(node: NodePtr) -> NodePtr;
    pub fn hermes_get_SwitchStatement_cases(node: NodePtr) -> NodeListRef;
    // LabeledStatement
    pub fn hermes_get_LabeledStatement_label(node: NodePtr) -> NodePtr;
    pub fn hermes_get_LabeledStatement_body(node: NodePtr) -> NodePtr;
    // ExpressionStatement
    pub fn hermes_get_ExpressionStatement_expression(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ExpressionStatement_directive(node: NodePtr) -> NodeStringOpt;
    // TryStatement
    pub fn hermes_get_TryStatement_block(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TryStatement_handler(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TryStatement_finalizer(node: NodePtr) -> NodePtrOpt;
    // IfStatement
    pub fn hermes_get_IfStatement_test(node: NodePtr) -> NodePtr;
    pub fn hermes_get_IfStatement_consequent(node: NodePtr) -> NodePtr;
    pub fn hermes_get_IfStatement_alternate(node: NodePtr) -> NodePtrOpt;
    // BooleanLiteral
    pub fn hermes_get_BooleanLiteral_value(node: NodePtr) -> bool;
    // StringLiteral
    pub fn hermes_get_StringLiteral_value(node: NodePtr) -> NodeString;
    // NumericLiteral
    pub fn hermes_get_NumericLiteral_value(node: NodePtr) -> f64;
    // RegExpLiteral
    pub fn hermes_get_RegExpLiteral_pattern(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_RegExpLiteral_flags(node: NodePtr) -> NodeLabel;
    // BigIntLiteral
    pub fn hermes_get_BigIntLiteral_bigint(node: NodePtr) -> NodeLabel;
    // SequenceExpression
    pub fn hermes_get_SequenceExpression_expressions(node: NodePtr) -> NodeListRef;
    // ObjectExpression
    pub fn hermes_get_ObjectExpression_properties(node: NodePtr) -> NodeListRef;
    // ArrayExpression
    pub fn hermes_get_ArrayExpression_elements(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ArrayExpression_trailingComma(node: NodePtr) -> bool;
    // SpreadElement
    pub fn hermes_get_SpreadElement_argument(node: NodePtr) -> NodePtr;
    // NewExpression
    pub fn hermes_get_NewExpression_callee(node: NodePtr) -> NodePtr;
    pub fn hermes_get_NewExpression_typeArguments(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_NewExpression_arguments(node: NodePtr) -> NodeListRef;
    // YieldExpression
    pub fn hermes_get_YieldExpression_argument(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_YieldExpression_delegate(node: NodePtr) -> bool;
    // AwaitExpression
    pub fn hermes_get_AwaitExpression_argument(node: NodePtr) -> NodePtr;
    // ImportExpression
    pub fn hermes_get_ImportExpression_source(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ImportExpression_attributes(node: NodePtr) -> NodePtrOpt;
    // CallExpression
    pub fn hermes_get_CallExpression_callee(node: NodePtr) -> NodePtr;
    pub fn hermes_get_CallExpression_typeArguments(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_CallExpression_arguments(node: NodePtr) -> NodeListRef;
    // OptionalCallExpression
    pub fn hermes_get_OptionalCallExpression_callee(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OptionalCallExpression_typeArguments(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_OptionalCallExpression_arguments(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_OptionalCallExpression_optional(node: NodePtr) -> bool;
    // AssignmentExpression
    pub fn hermes_get_AssignmentExpression_operator(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_AssignmentExpression_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_AssignmentExpression_right(node: NodePtr) -> NodePtr;
    // UnaryExpression
    pub fn hermes_get_UnaryExpression_operator(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_UnaryExpression_argument(node: NodePtr) -> NodePtr;
    pub fn hermes_get_UnaryExpression_prefix(node: NodePtr) -> bool;
    // UpdateExpression
    pub fn hermes_get_UpdateExpression_operator(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_UpdateExpression_argument(node: NodePtr) -> NodePtr;
    pub fn hermes_get_UpdateExpression_prefix(node: NodePtr) -> bool;
    // MemberExpression
    pub fn hermes_get_MemberExpression_object(node: NodePtr) -> NodePtr;
    pub fn hermes_get_MemberExpression_property(node: NodePtr) -> NodePtr;
    pub fn hermes_get_MemberExpression_computed(node: NodePtr) -> bool;
    // OptionalMemberExpression
    pub fn hermes_get_OptionalMemberExpression_object(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OptionalMemberExpression_property(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OptionalMemberExpression_computed(node: NodePtr) -> bool;
    pub fn hermes_get_OptionalMemberExpression_optional(node: NodePtr) -> bool;
    // LogicalExpression
    pub fn hermes_get_LogicalExpression_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_LogicalExpression_right(node: NodePtr) -> NodePtr;
    pub fn hermes_get_LogicalExpression_operator(node: NodePtr) -> NodeLabel;
    // ConditionalExpression
    pub fn hermes_get_ConditionalExpression_test(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ConditionalExpression_alternate(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ConditionalExpression_consequent(node: NodePtr) -> NodePtr;
    // BinaryExpression
    pub fn hermes_get_BinaryExpression_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_BinaryExpression_right(node: NodePtr) -> NodePtr;
    pub fn hermes_get_BinaryExpression_operator(node: NodePtr) -> NodeLabel;
    // Directive
    pub fn hermes_get_Directive_value(node: NodePtr) -> NodePtr;
    // DirectiveLiteral
    pub fn hermes_get_DirectiveLiteral_value(node: NodePtr) -> NodeString;
    // Identifier
    pub fn hermes_get_Identifier_name(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_Identifier_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_Identifier_optional(node: NodePtr) -> bool;
    // PrivateName
    pub fn hermes_get_PrivateName_id(node: NodePtr) -> NodePtr;
    // MetaProperty
    pub fn hermes_get_MetaProperty_meta(node: NodePtr) -> NodePtr;
    pub fn hermes_get_MetaProperty_property(node: NodePtr) -> NodePtr;
    // SwitchCase
    pub fn hermes_get_SwitchCase_test(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_SwitchCase_consequent(node: NodePtr) -> NodeListRef;
    // CatchClause
    pub fn hermes_get_CatchClause_param(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_CatchClause_body(node: NodePtr) -> NodePtr;
    // VariableDeclarator
    pub fn hermes_get_VariableDeclarator_init(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_VariableDeclarator_id(node: NodePtr) -> NodePtr;
    // VariableDeclaration
    pub fn hermes_get_VariableDeclaration_kind(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_VariableDeclaration_declarations(node: NodePtr) -> NodeListRef;
    // TemplateLiteral
    pub fn hermes_get_TemplateLiteral_quasis(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TemplateLiteral_expressions(node: NodePtr) -> NodeListRef;
    // TaggedTemplateExpression
    pub fn hermes_get_TaggedTemplateExpression_tag(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TaggedTemplateExpression_quasi(node: NodePtr) -> NodePtr;
    // TemplateElement
    pub fn hermes_get_TemplateElement_tail(node: NodePtr) -> bool;
    pub fn hermes_get_TemplateElement_cooked(node: NodePtr) -> NodeStringOpt;
    pub fn hermes_get_TemplateElement_raw(node: NodePtr) -> NodeLabel;
    // Property
    pub fn hermes_get_Property_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_Property_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_Property_kind(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_Property_computed(node: NodePtr) -> bool;
    pub fn hermes_get_Property_method(node: NodePtr) -> bool;
    pub fn hermes_get_Property_shorthand(node: NodePtr) -> bool;
    // ClassDeclaration
    pub fn hermes_get_ClassDeclaration_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassDeclaration_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassDeclaration_superClass(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassDeclaration_superTypeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassDeclaration_implements(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ClassDeclaration_decorators(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ClassDeclaration_body(node: NodePtr) -> NodePtr;
    // ClassExpression
    pub fn hermes_get_ClassExpression_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassExpression_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassExpression_superClass(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassExpression_superTypeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassExpression_implements(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ClassExpression_decorators(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ClassExpression_body(node: NodePtr) -> NodePtr;
    // ClassBody
    pub fn hermes_get_ClassBody_body(node: NodePtr) -> NodeListRef;
    // ClassProperty
    pub fn hermes_get_ClassProperty_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ClassProperty_value(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassProperty_computed(node: NodePtr) -> bool;
    pub fn hermes_get_ClassProperty_static(node: NodePtr) -> bool;
    pub fn hermes_get_ClassProperty_declare(node: NodePtr) -> bool;
    pub fn hermes_get_ClassProperty_optional(node: NodePtr) -> bool;
    pub fn hermes_get_ClassProperty_variance(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassProperty_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    // ClassPrivateProperty
    pub fn hermes_get_ClassPrivateProperty_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ClassPrivateProperty_value(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassPrivateProperty_static(node: NodePtr) -> bool;
    pub fn hermes_get_ClassPrivateProperty_declare(node: NodePtr) -> bool;
    pub fn hermes_get_ClassPrivateProperty_optional(node: NodePtr) -> bool;
    pub fn hermes_get_ClassPrivateProperty_variance(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ClassPrivateProperty_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    // MethodDefinition
    pub fn hermes_get_MethodDefinition_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_MethodDefinition_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_MethodDefinition_kind(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_MethodDefinition_computed(node: NodePtr) -> bool;
    pub fn hermes_get_MethodDefinition_static(node: NodePtr) -> bool;
    // ImportDeclaration
    pub fn hermes_get_ImportDeclaration_specifiers(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ImportDeclaration_source(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ImportDeclaration_assertions(node: NodePtr) -> NodeListOptRef;
    pub fn hermes_get_ImportDeclaration_importKind(node: NodePtr) -> NodeLabel;
    // ImportSpecifier
    pub fn hermes_get_ImportSpecifier_imported(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ImportSpecifier_local(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ImportSpecifier_importKind(node: NodePtr) -> NodeLabel;
    // ImportDefaultSpecifier
    pub fn hermes_get_ImportDefaultSpecifier_local(node: NodePtr) -> NodePtr;
    // ImportNamespaceSpecifier
    pub fn hermes_get_ImportNamespaceSpecifier_local(node: NodePtr) -> NodePtr;
    // ImportAttribute
    pub fn hermes_get_ImportAttribute_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ImportAttribute_value(node: NodePtr) -> NodePtr;
    // ExportNamedDeclaration
    pub fn hermes_get_ExportNamedDeclaration_declaration(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ExportNamedDeclaration_specifiers(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ExportNamedDeclaration_source(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ExportNamedDeclaration_exportKind(node: NodePtr) -> NodeLabel;
    // ExportSpecifier
    pub fn hermes_get_ExportSpecifier_exported(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ExportSpecifier_local(node: NodePtr) -> NodePtr;
    // ExportNamespaceSpecifier
    pub fn hermes_get_ExportNamespaceSpecifier_exported(node: NodePtr) -> NodePtr;
    // ExportDefaultDeclaration
    pub fn hermes_get_ExportDefaultDeclaration_declaration(node: NodePtr) -> NodePtr;
    // ExportAllDeclaration
    pub fn hermes_get_ExportAllDeclaration_source(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ExportAllDeclaration_exportKind(node: NodePtr) -> NodeLabel;
    // ObjectPattern
    pub fn hermes_get_ObjectPattern_properties(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ObjectPattern_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    // ArrayPattern
    pub fn hermes_get_ArrayPattern_elements(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ArrayPattern_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    // RestElement
    pub fn hermes_get_RestElement_argument(node: NodePtr) -> NodePtr;
    // AssignmentPattern
    pub fn hermes_get_AssignmentPattern_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_AssignmentPattern_right(node: NodePtr) -> NodePtr;
    // JSXIdentifier
    pub fn hermes_get_JSXIdentifier_name(node: NodePtr) -> NodeLabel;
    // JSXMemberExpression
    pub fn hermes_get_JSXMemberExpression_object(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXMemberExpression_property(node: NodePtr) -> NodePtr;
    // JSXNamespacedName
    pub fn hermes_get_JSXNamespacedName_namespace(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXNamespacedName_name(node: NodePtr) -> NodePtr;
    // JSXExpressionContainer
    pub fn hermes_get_JSXExpressionContainer_expression(node: NodePtr) -> NodePtr;
    // JSXSpreadChild
    pub fn hermes_get_JSXSpreadChild_expression(node: NodePtr) -> NodePtr;
    // JSXOpeningElement
    pub fn hermes_get_JSXOpeningElement_name(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXOpeningElement_attributes(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_JSXOpeningElement_selfClosing(node: NodePtr) -> bool;
    // JSXClosingElement
    pub fn hermes_get_JSXClosingElement_name(node: NodePtr) -> NodePtr;
    // JSXAttribute
    pub fn hermes_get_JSXAttribute_name(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXAttribute_value(node: NodePtr) -> NodePtrOpt;
    // JSXSpreadAttribute
    pub fn hermes_get_JSXSpreadAttribute_argument(node: NodePtr) -> NodePtr;
    // JSXStringLiteral
    pub fn hermes_get_JSXStringLiteral_value(node: NodePtr) -> NodeString;
    pub fn hermes_get_JSXStringLiteral_raw(node: NodePtr) -> NodeLabel;
    // JSXText
    pub fn hermes_get_JSXText_value(node: NodePtr) -> NodeString;
    pub fn hermes_get_JSXText_raw(node: NodePtr) -> NodeLabel;
    // JSXElement
    pub fn hermes_get_JSXElement_openingElement(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXElement_children(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_JSXElement_closingElement(node: NodePtr) -> NodePtrOpt;
    // JSXFragment
    pub fn hermes_get_JSXFragment_openingFragment(node: NodePtr) -> NodePtr;
    pub fn hermes_get_JSXFragment_children(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_JSXFragment_closingFragment(node: NodePtr) -> NodePtr;
    // StringLiteralTypeAnnotation
    pub fn hermes_get_StringLiteralTypeAnnotation_value(node: NodePtr) -> NodeString;
    pub fn hermes_get_StringLiteralTypeAnnotation_raw(node: NodePtr) -> NodeString;
    // NumberLiteralTypeAnnotation
    pub fn hermes_get_NumberLiteralTypeAnnotation_value(node: NodePtr) -> f64;
    pub fn hermes_get_NumberLiteralTypeAnnotation_raw(node: NodePtr) -> NodeLabel;
    // BigIntLiteralTypeAnnotation
    pub fn hermes_get_BigIntLiteralTypeAnnotation_raw(node: NodePtr) -> NodeLabel;
    // BooleanLiteralTypeAnnotation
    pub fn hermes_get_BooleanLiteralTypeAnnotation_value(node: NodePtr) -> bool;
    pub fn hermes_get_BooleanLiteralTypeAnnotation_raw(node: NodePtr) -> NodeLabel;
    // FunctionTypeAnnotation
    pub fn hermes_get_FunctionTypeAnnotation_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_FunctionTypeAnnotation_this(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionTypeAnnotation_returnType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_FunctionTypeAnnotation_rest(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionTypeAnnotation_typeParameters(node: NodePtr) -> NodePtrOpt;
    // FunctionTypeParam
    pub fn hermes_get_FunctionTypeParam_name(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_FunctionTypeParam_typeAnnotation(node: NodePtr) -> NodePtr;
    pub fn hermes_get_FunctionTypeParam_optional(node: NodePtr) -> bool;
    // NullableTypeAnnotation
    pub fn hermes_get_NullableTypeAnnotation_typeAnnotation(node: NodePtr) -> NodePtr;
    // QualifiedTypeIdentifier
    pub fn hermes_get_QualifiedTypeIdentifier_qualification(node: NodePtr) -> NodePtr;
    pub fn hermes_get_QualifiedTypeIdentifier_id(node: NodePtr) -> NodePtr;
    // TypeofTypeAnnotation
    pub fn hermes_get_TypeofTypeAnnotation_argument(node: NodePtr) -> NodePtr;
    // TupleTypeAnnotation
    pub fn hermes_get_TupleTypeAnnotation_types(node: NodePtr) -> NodeListRef;
    // ArrayTypeAnnotation
    pub fn hermes_get_ArrayTypeAnnotation_elementType(node: NodePtr) -> NodePtr;
    // UnionTypeAnnotation
    pub fn hermes_get_UnionTypeAnnotation_types(node: NodePtr) -> NodeListRef;
    // IntersectionTypeAnnotation
    pub fn hermes_get_IntersectionTypeAnnotation_types(node: NodePtr) -> NodeListRef;
    // GenericTypeAnnotation
    pub fn hermes_get_GenericTypeAnnotation_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_GenericTypeAnnotation_typeParameters(node: NodePtr) -> NodePtrOpt;
    // IndexedAccessType
    pub fn hermes_get_IndexedAccessType_objectType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_IndexedAccessType_indexType(node: NodePtr) -> NodePtr;
    // OptionalIndexedAccessType
    pub fn hermes_get_OptionalIndexedAccessType_objectType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OptionalIndexedAccessType_indexType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OptionalIndexedAccessType_optional(node: NodePtr) -> bool;
    // InterfaceTypeAnnotation
    pub fn hermes_get_InterfaceTypeAnnotation_extends(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_InterfaceTypeAnnotation_body(node: NodePtr) -> NodePtrOpt;
    // TypeAlias
    pub fn hermes_get_TypeAlias_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TypeAlias_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TypeAlias_right(node: NodePtr) -> NodePtr;
    // OpaqueType
    pub fn hermes_get_OpaqueType_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OpaqueType_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_OpaqueType_impltype(node: NodePtr) -> NodePtr;
    pub fn hermes_get_OpaqueType_supertype(node: NodePtr) -> NodePtrOpt;
    // InterfaceDeclaration
    pub fn hermes_get_InterfaceDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_InterfaceDeclaration_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_InterfaceDeclaration_extends(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_InterfaceDeclaration_body(node: NodePtr) -> NodePtr;
    // DeclareTypeAlias
    pub fn hermes_get_DeclareTypeAlias_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareTypeAlias_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareTypeAlias_right(node: NodePtr) -> NodePtr;
    // DeclareOpaqueType
    pub fn hermes_get_DeclareOpaqueType_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareOpaqueType_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareOpaqueType_impltype(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareOpaqueType_supertype(node: NodePtr) -> NodePtrOpt;
    // DeclareInterface
    pub fn hermes_get_DeclareInterface_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareInterface_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareInterface_extends(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_DeclareInterface_body(node: NodePtr) -> NodePtr;
    // DeclareClass
    pub fn hermes_get_DeclareClass_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareClass_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareClass_extends(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_DeclareClass_implements(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_DeclareClass_mixins(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_DeclareClass_body(node: NodePtr) -> NodePtr;
    // DeclareFunction
    pub fn hermes_get_DeclareFunction_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareFunction_predicate(node: NodePtr) -> NodePtrOpt;
    // DeclareVariable
    pub fn hermes_get_DeclareVariable_id(node: NodePtr) -> NodePtr;
    // DeclareExportDeclaration
    pub fn hermes_get_DeclareExportDeclaration_declaration(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareExportDeclaration_specifiers(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_DeclareExportDeclaration_source(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_DeclareExportDeclaration_default(node: NodePtr) -> bool;
    // DeclareExportAllDeclaration
    pub fn hermes_get_DeclareExportAllDeclaration_source(node: NodePtr) -> NodePtr;
    // DeclareModule
    pub fn hermes_get_DeclareModule_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareModule_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_DeclareModule_kind(node: NodePtr) -> NodeLabel;
    // DeclareModuleExports
    pub fn hermes_get_DeclareModuleExports_typeAnnotation(node: NodePtr) -> NodePtr;
    // InterfaceExtends
    pub fn hermes_get_InterfaceExtends_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_InterfaceExtends_typeParameters(node: NodePtr) -> NodePtrOpt;
    // ClassImplements
    pub fn hermes_get_ClassImplements_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ClassImplements_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TypeAnnotation
    pub fn hermes_get_TypeAnnotation_typeAnnotation(node: NodePtr) -> NodePtr;
    // ObjectTypeAnnotation
    pub fn hermes_get_ObjectTypeAnnotation_properties(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ObjectTypeAnnotation_indexers(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ObjectTypeAnnotation_callProperties(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ObjectTypeAnnotation_internalSlots(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_ObjectTypeAnnotation_inexact(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeAnnotation_exact(node: NodePtr) -> bool;
    // ObjectTypeProperty
    pub fn hermes_get_ObjectTypeProperty_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeProperty_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeProperty_method(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeProperty_optional(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeProperty_static(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeProperty_proto(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeProperty_variance(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ObjectTypeProperty_kind(node: NodePtr) -> NodeLabel;
    // ObjectTypeSpreadProperty
    pub fn hermes_get_ObjectTypeSpreadProperty_argument(node: NodePtr) -> NodePtr;
    // ObjectTypeInternalSlot
    pub fn hermes_get_ObjectTypeInternalSlot_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeInternalSlot_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeInternalSlot_optional(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeInternalSlot_static(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeInternalSlot_method(node: NodePtr) -> bool;
    // ObjectTypeCallProperty
    pub fn hermes_get_ObjectTypeCallProperty_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeCallProperty_static(node: NodePtr) -> bool;
    // ObjectTypeIndexer
    pub fn hermes_get_ObjectTypeIndexer_id(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_ObjectTypeIndexer_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeIndexer_value(node: NodePtr) -> NodePtr;
    pub fn hermes_get_ObjectTypeIndexer_static(node: NodePtr) -> bool;
    pub fn hermes_get_ObjectTypeIndexer_variance(node: NodePtr) -> NodePtrOpt;
    // Variance
    pub fn hermes_get_Variance_kind(node: NodePtr) -> NodeLabel;
    // TypeParameterDeclaration
    pub fn hermes_get_TypeParameterDeclaration_params(node: NodePtr) -> NodeListRef;
    // TypeParameter
    pub fn hermes_get_TypeParameter_name(node: NodePtr) -> NodeLabel;
    pub fn hermes_get_TypeParameter_bound(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TypeParameter_variance(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TypeParameter_default(node: NodePtr) -> NodePtrOpt;
    // TypeParameterInstantiation
    pub fn hermes_get_TypeParameterInstantiation_params(node: NodePtr) -> NodeListRef;
    // TypeCastExpression
    pub fn hermes_get_TypeCastExpression_expression(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TypeCastExpression_typeAnnotation(node: NodePtr) -> NodePtr;
    // DeclaredPredicate
    pub fn hermes_get_DeclaredPredicate_value(node: NodePtr) -> NodePtr;
    // EnumDeclaration
    pub fn hermes_get_EnumDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_EnumDeclaration_body(node: NodePtr) -> NodePtr;
    // EnumStringBody
    pub fn hermes_get_EnumStringBody_members(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_EnumStringBody_explicitType(node: NodePtr) -> bool;
    pub fn hermes_get_EnumStringBody_hasUnknownMembers(node: NodePtr) -> bool;
    // EnumNumberBody
    pub fn hermes_get_EnumNumberBody_members(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_EnumNumberBody_explicitType(node: NodePtr) -> bool;
    pub fn hermes_get_EnumNumberBody_hasUnknownMembers(node: NodePtr) -> bool;
    // EnumBooleanBody
    pub fn hermes_get_EnumBooleanBody_members(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_EnumBooleanBody_explicitType(node: NodePtr) -> bool;
    pub fn hermes_get_EnumBooleanBody_hasUnknownMembers(node: NodePtr) -> bool;
    // EnumSymbolBody
    pub fn hermes_get_EnumSymbolBody_members(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_EnumSymbolBody_hasUnknownMembers(node: NodePtr) -> bool;
    // EnumDefaultedMember
    pub fn hermes_get_EnumDefaultedMember_id(node: NodePtr) -> NodePtr;
    // EnumStringMember
    pub fn hermes_get_EnumStringMember_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_EnumStringMember_init(node: NodePtr) -> NodePtr;
    // EnumNumberMember
    pub fn hermes_get_EnumNumberMember_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_EnumNumberMember_init(node: NodePtr) -> NodePtr;
    // EnumBooleanMember
    pub fn hermes_get_EnumBooleanMember_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_EnumBooleanMember_init(node: NodePtr) -> NodePtr;
    // TSTypeAnnotation
    pub fn hermes_get_TSTypeAnnotation_typeAnnotation(node: NodePtr) -> NodePtr;
    // TSLiteralType
    pub fn hermes_get_TSLiteralType_literal(node: NodePtr) -> NodePtr;
    // TSIndexedAccessType
    pub fn hermes_get_TSIndexedAccessType_objectType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSIndexedAccessType_indexType(node: NodePtr) -> NodePtr;
    // TSArrayType
    pub fn hermes_get_TSArrayType_elementType(node: NodePtr) -> NodePtr;
    // TSTypeReference
    pub fn hermes_get_TSTypeReference_typeName(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSTypeReference_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TSQualifiedName
    pub fn hermes_get_TSQualifiedName_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSQualifiedName_right(node: NodePtr) -> NodePtrOpt;
    // TSFunctionType
    pub fn hermes_get_TSFunctionType_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSFunctionType_returnType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSFunctionType_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TSConstructorType
    pub fn hermes_get_TSConstructorType_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSConstructorType_returnType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSConstructorType_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TSTypePredicate
    pub fn hermes_get_TSTypePredicate_parameterName(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSTypePredicate_typeAnnotation(node: NodePtr) -> NodePtr;
    // TSTupleType
    pub fn hermes_get_TSTupleType_elementTypes(node: NodePtr) -> NodeListRef;
    // TSTypeAssertion
    pub fn hermes_get_TSTypeAssertion_typeAnnotation(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSTypeAssertion_expression(node: NodePtr) -> NodePtr;
    // TSAsExpression
    pub fn hermes_get_TSAsExpression_expression(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSAsExpression_typeAnnotation(node: NodePtr) -> NodePtr;
    // TSParameterProperty
    pub fn hermes_get_TSParameterProperty_parameter(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSParameterProperty_accessibility(node: NodePtr) -> NodeLabelOpt;
    pub fn hermes_get_TSParameterProperty_readonly(node: NodePtr) -> bool;
    pub fn hermes_get_TSParameterProperty_static(node: NodePtr) -> bool;
    pub fn hermes_get_TSParameterProperty_export(node: NodePtr) -> bool;
    // TSTypeAliasDeclaration
    pub fn hermes_get_TSTypeAliasDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSTypeAliasDeclaration_typeParameters(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TSTypeAliasDeclaration_typeAnnotation(node: NodePtr) -> NodePtr;
    // TSInterfaceDeclaration
    pub fn hermes_get_TSInterfaceDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSInterfaceDeclaration_body(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSInterfaceDeclaration_extends(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSInterfaceDeclaration_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TSInterfaceHeritage
    pub fn hermes_get_TSInterfaceHeritage_expression(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSInterfaceHeritage_typeParameters(node: NodePtr) -> NodePtrOpt;
    // TSInterfaceBody
    pub fn hermes_get_TSInterfaceBody_body(node: NodePtr) -> NodeListRef;
    // TSEnumDeclaration
    pub fn hermes_get_TSEnumDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSEnumDeclaration_members(node: NodePtr) -> NodeListRef;
    // TSEnumMember
    pub fn hermes_get_TSEnumMember_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSEnumMember_initializer(node: NodePtr) -> NodePtrOpt;
    // TSModuleDeclaration
    pub fn hermes_get_TSModuleDeclaration_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSModuleDeclaration_body(node: NodePtr) -> NodePtr;
    // TSModuleBlock
    pub fn hermes_get_TSModuleBlock_body(node: NodePtr) -> NodeListRef;
    // TSModuleMember
    pub fn hermes_get_TSModuleMember_id(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSModuleMember_initializer(node: NodePtr) -> NodePtrOpt;
    // TSTypeParameterDeclaration
    pub fn hermes_get_TSTypeParameterDeclaration_params(node: NodePtr) -> NodeListRef;
    // TSTypeParameter
    pub fn hermes_get_TSTypeParameter_name(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSTypeParameter_constraint(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TSTypeParameter_default(node: NodePtr) -> NodePtrOpt;
    // TSTypeParameterInstantiation
    pub fn hermes_get_TSTypeParameterInstantiation_params(node: NodePtr) -> NodeListRef;
    // TSUnionType
    pub fn hermes_get_TSUnionType_types(node: NodePtr) -> NodeListRef;
    // TSIntersectionType
    pub fn hermes_get_TSIntersectionType_types(node: NodePtr) -> NodeListRef;
    // TSTypeQuery
    pub fn hermes_get_TSTypeQuery_exprName(node: NodePtr) -> NodePtr;
    // TSConditionalType
    pub fn hermes_get_TSConditionalType_extendsType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSConditionalType_checkType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSConditionalType_trueType(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSConditionalType_falseTYpe(node: NodePtr) -> NodePtr;
    // TSTypeLiteral
    pub fn hermes_get_TSTypeLiteral_members(node: NodePtr) -> NodeListRef;
    // TSPropertySignature
    pub fn hermes_get_TSPropertySignature_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSPropertySignature_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TSPropertySignature_initializer(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TSPropertySignature_optional(node: NodePtr) -> bool;
    pub fn hermes_get_TSPropertySignature_computed(node: NodePtr) -> bool;
    pub fn hermes_get_TSPropertySignature_readonly(node: NodePtr) -> bool;
    pub fn hermes_get_TSPropertySignature_static(node: NodePtr) -> bool;
    pub fn hermes_get_TSPropertySignature_export(node: NodePtr) -> bool;
    // TSMethodSignature
    pub fn hermes_get_TSMethodSignature_key(node: NodePtr) -> NodePtr;
    pub fn hermes_get_TSMethodSignature_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSMethodSignature_returnType(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_TSMethodSignature_computed(node: NodePtr) -> bool;
    // TSIndexSignature
    pub fn hermes_get_TSIndexSignature_parameters(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSIndexSignature_typeAnnotation(node: NodePtr) -> NodePtrOpt;
    // TSCallSignatureDeclaration
    pub fn hermes_get_TSCallSignatureDeclaration_params(node: NodePtr) -> NodeListRef;
    pub fn hermes_get_TSCallSignatureDeclaration_returnType(node: NodePtr) -> NodePtrOpt;
    // CoverInitializer
    pub fn hermes_get_CoverInitializer_init(node: NodePtr) -> NodePtr;
    // CoverRestElement
    pub fn hermes_get_CoverRestElement_rest(node: NodePtr) -> NodePtr;
    // CoverTypedIdentifier
    pub fn hermes_get_CoverTypedIdentifier_left(node: NodePtr) -> NodePtr;
    pub fn hermes_get_CoverTypedIdentifier_right(node: NodePtr) -> NodePtrOpt;
    pub fn hermes_get_CoverTypedIdentifier_optional(node: NodePtr) -> bool;
}
