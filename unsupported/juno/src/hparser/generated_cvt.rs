/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by Hermes rustgen
// DO NOT EDIT

use hermes::parser::*;
use super::convert::*;
use crate::ast;

pub unsafe fn cvt_node_ptr(cvt: &Converter, n: NodePtr) -> ast::NodePtr {
    let nr = n.as_ref();
    let range = cvt.smrange(nr.source_range);

    match nr.kind {
        NodeKind::Empty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Empty {
                },
            }
        ),
        NodeKind::Metadata => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Metadata {
                },
            }
        ),
        NodeKind::Program => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Program {
                    body: cvt_node_list(cvt, hermes_get_Program_body(n)),
                },
            }
        ),
        NodeKind::FunctionExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionExpression {
                    id: cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_id(n)),
                    params: cvt_node_list(cvt, hermes_get_FunctionExpression_params(n)),
                    body: cvt_node_ptr(cvt, hermes_get_FunctionExpression_body(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_typeParameters(n)),
                    return_type: cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_returnType(n)),
                    predicate: cvt_node_ptr_opt(cvt, hermes_get_FunctionExpression_predicate(n)),
                    generator: hermes_get_FunctionExpression_generator(n),
                    is_async: hermes_get_FunctionExpression_async(n),
                },
            }
        ),
        NodeKind::ArrowFunctionExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrowFunctionExpression {
                    id: cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_id(n)),
                    params: cvt_node_list(cvt, hermes_get_ArrowFunctionExpression_params(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ArrowFunctionExpression_body(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_typeParameters(n)),
                    return_type: cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_returnType(n)),
                    predicate: cvt_node_ptr_opt(cvt, hermes_get_ArrowFunctionExpression_predicate(n)),
                    expression: hermes_get_ArrowFunctionExpression_expression(n),
                    is_async: hermes_get_ArrowFunctionExpression_async(n),
                },
            }
        ),
        NodeKind::FunctionDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionDeclaration {
                    id: cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_id(n)),
                    params: cvt_node_list(cvt, hermes_get_FunctionDeclaration_params(n)),
                    body: cvt_node_ptr(cvt, hermes_get_FunctionDeclaration_body(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_typeParameters(n)),
                    return_type: cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_returnType(n)),
                    predicate: cvt_node_ptr_opt(cvt, hermes_get_FunctionDeclaration_predicate(n)),
                    generator: hermes_get_FunctionDeclaration_generator(n),
                    is_async: hermes_get_FunctionDeclaration_async(n),
                },
            }
        ),
        NodeKind::WhileStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::WhileStatement {
                    body: cvt_node_ptr(cvt, hermes_get_WhileStatement_body(n)),
                    test: cvt_node_ptr(cvt, hermes_get_WhileStatement_test(n)),
                },
            }
        ),
        NodeKind::DoWhileStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DoWhileStatement {
                    body: cvt_node_ptr(cvt, hermes_get_DoWhileStatement_body(n)),
                    test: cvt_node_ptr(cvt, hermes_get_DoWhileStatement_test(n)),
                },
            }
        ),
        NodeKind::ForInStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ForInStatement {
                    left: cvt_node_ptr(cvt, hermes_get_ForInStatement_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_ForInStatement_right(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ForInStatement_body(n)),
                },
            }
        ),
        NodeKind::ForOfStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ForOfStatement {
                    left: cvt_node_ptr(cvt, hermes_get_ForOfStatement_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_ForOfStatement_right(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ForOfStatement_body(n)),
                    is_await: hermes_get_ForOfStatement_await(n),
                },
            }
        ),
        NodeKind::ForStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ForStatement {
                    init: cvt_node_ptr_opt(cvt, hermes_get_ForStatement_init(n)),
                    test: cvt_node_ptr_opt(cvt, hermes_get_ForStatement_test(n)),
                    update: cvt_node_ptr_opt(cvt, hermes_get_ForStatement_update(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ForStatement_body(n)),
                },
            }
        ),
        NodeKind::DebuggerStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DebuggerStatement {
                },
            }
        ),
        NodeKind::EmptyStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EmptyStatement {
                },
            }
        ),
        NodeKind::BlockStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BlockStatement {
                    body: cvt_node_list(cvt, hermes_get_BlockStatement_body(n)),
                },
            }
        ),
        NodeKind::BreakStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BreakStatement {
                    label: cvt_node_ptr_opt(cvt, hermes_get_BreakStatement_label(n)),
                },
            }
        ),
        NodeKind::ContinueStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ContinueStatement {
                    label: cvt_node_ptr_opt(cvt, hermes_get_ContinueStatement_label(n)),
                },
            }
        ),
        NodeKind::ThrowStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ThrowStatement {
                    argument: cvt_node_ptr(cvt, hermes_get_ThrowStatement_argument(n)),
                },
            }
        ),
        NodeKind::ReturnStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ReturnStatement {
                    argument: cvt_node_ptr_opt(cvt, hermes_get_ReturnStatement_argument(n)),
                },
            }
        ),
        NodeKind::WithStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::WithStatement {
                    object: cvt_node_ptr(cvt, hermes_get_WithStatement_object(n)),
                    body: cvt_node_ptr(cvt, hermes_get_WithStatement_body(n)),
                },
            }
        ),
        NodeKind::SwitchStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::SwitchStatement {
                    discriminant: cvt_node_ptr(cvt, hermes_get_SwitchStatement_discriminant(n)),
                    cases: cvt_node_list(cvt, hermes_get_SwitchStatement_cases(n)),
                },
            }
        ),
        NodeKind::LabeledStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::LabeledStatement {
                    label: cvt_node_ptr(cvt, hermes_get_LabeledStatement_label(n)),
                    body: cvt_node_ptr(cvt, hermes_get_LabeledStatement_body(n)),
                },
            }
        ),
        NodeKind::ExpressionStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExpressionStatement {
                    expression: cvt_node_ptr(cvt, hermes_get_ExpressionStatement_expression(n)),
                    directive: cvt_string_opt(hermes_get_ExpressionStatement_directive(n)),
                },
            }
        ),
        NodeKind::TryStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TryStatement {
                    block: cvt_node_ptr(cvt, hermes_get_TryStatement_block(n)),
                    handler: cvt_node_ptr_opt(cvt, hermes_get_TryStatement_handler(n)),
                    finalizer: cvt_node_ptr_opt(cvt, hermes_get_TryStatement_finalizer(n)),
                },
            }
        ),
        NodeKind::IfStatement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::IfStatement {
                    test: cvt_node_ptr(cvt, hermes_get_IfStatement_test(n)),
                    consequent: cvt_node_ptr(cvt, hermes_get_IfStatement_consequent(n)),
                    alternate: cvt_node_ptr_opt(cvt, hermes_get_IfStatement_alternate(n)),
                },
            }
        ),
        NodeKind::NullLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NullLiteral {
                },
            }
        ),
        NodeKind::BooleanLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanLiteral {
                    value: hermes_get_BooleanLiteral_value(n),
                },
            }
        ),
        NodeKind::StringLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::StringLiteral {
                    value: cvt_string(hermes_get_StringLiteral_value(n)),
                },
            }
        ),
        NodeKind::NumericLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NumericLiteral {
                    value: hermes_get_NumericLiteral_value(n),
                },
            }
        ),
        NodeKind::RegExpLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::RegExpLiteral {
                    pattern: cvt_label(hermes_get_RegExpLiteral_pattern(n)),
                    flags: cvt_label(hermes_get_RegExpLiteral_flags(n)),
                },
            }
        ),
        NodeKind::ThisExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ThisExpression {
                },
            }
        ),
        NodeKind::Super => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Super {
                },
            }
        ),
        NodeKind::SequenceExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::SequenceExpression {
                    expressions: cvt_node_list(cvt, hermes_get_SequenceExpression_expressions(n)),
                },
            }
        ),
        NodeKind::ObjectExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectExpression {
                    properties: cvt_node_list(cvt, hermes_get_ObjectExpression_properties(n)),
                },
            }
        ),
        NodeKind::ArrayExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayExpression {
                    elements: cvt_node_list(cvt, hermes_get_ArrayExpression_elements(n)),
                    trailing_comma: hermes_get_ArrayExpression_trailingComma(n),
                },
            }
        ),
        NodeKind::SpreadElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::SpreadElement {
                    argument: cvt_node_ptr(cvt, hermes_get_SpreadElement_argument(n)),
                },
            }
        ),
        NodeKind::NewExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NewExpression {
                    callee: cvt_node_ptr(cvt, hermes_get_NewExpression_callee(n)),
                    type_arguments: cvt_node_ptr_opt(cvt, hermes_get_NewExpression_typeArguments(n)),
                    arguments: cvt_node_list(cvt, hermes_get_NewExpression_arguments(n)),
                },
            }
        ),
        NodeKind::YieldExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::YieldExpression {
                    argument: cvt_node_ptr_opt(cvt, hermes_get_YieldExpression_argument(n)),
                    delegate: hermes_get_YieldExpression_delegate(n),
                },
            }
        ),
        NodeKind::AwaitExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::AwaitExpression {
                    argument: cvt_node_ptr(cvt, hermes_get_AwaitExpression_argument(n)),
                },
            }
        ),
        NodeKind::ImportExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportExpression {
                    source: cvt_node_ptr(cvt, hermes_get_ImportExpression_source(n)),
                    attributes: cvt_node_ptr_opt(cvt, hermes_get_ImportExpression_attributes(n)),
                },
            }
        ),
        NodeKind::CallExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::CallExpression {
                    callee: cvt_node_ptr(cvt, hermes_get_CallExpression_callee(n)),
                    type_arguments: cvt_node_ptr_opt(cvt, hermes_get_CallExpression_typeArguments(n)),
                    arguments: cvt_node_list(cvt, hermes_get_CallExpression_arguments(n)),
                },
            }
        ),
        NodeKind::OptionalCallExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalCallExpression {
                    callee: cvt_node_ptr(cvt, hermes_get_OptionalCallExpression_callee(n)),
                    type_arguments: cvt_node_ptr_opt(cvt, hermes_get_OptionalCallExpression_typeArguments(n)),
                    arguments: cvt_node_list(cvt, hermes_get_OptionalCallExpression_arguments(n)),
                    optional: hermes_get_OptionalCallExpression_optional(n),
                },
            }
        ),
        NodeKind::AssignmentExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::AssignmentExpression {
                    operator: cvt_enum(hermes_get_AssignmentExpression_operator(n)),
                    left: cvt_node_ptr(cvt, hermes_get_AssignmentExpression_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_AssignmentExpression_right(n)),
                },
            }
        ),
        NodeKind::UnaryExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::UnaryExpression {
                    operator: cvt_enum(hermes_get_UnaryExpression_operator(n)),
                    argument: cvt_node_ptr(cvt, hermes_get_UnaryExpression_argument(n)),
                    prefix: hermes_get_UnaryExpression_prefix(n),
                },
            }
        ),
        NodeKind::UpdateExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::UpdateExpression {
                    operator: cvt_enum(hermes_get_UpdateExpression_operator(n)),
                    argument: cvt_node_ptr(cvt, hermes_get_UpdateExpression_argument(n)),
                    prefix: hermes_get_UpdateExpression_prefix(n),
                },
            }
        ),
        NodeKind::MemberExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::MemberExpression {
                    object: cvt_node_ptr(cvt, hermes_get_MemberExpression_object(n)),
                    property: cvt_node_ptr(cvt, hermes_get_MemberExpression_property(n)),
                    computed: hermes_get_MemberExpression_computed(n),
                },
            }
        ),
        NodeKind::OptionalMemberExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalMemberExpression {
                    object: cvt_node_ptr(cvt, hermes_get_OptionalMemberExpression_object(n)),
                    property: cvt_node_ptr(cvt, hermes_get_OptionalMemberExpression_property(n)),
                    computed: hermes_get_OptionalMemberExpression_computed(n),
                    optional: hermes_get_OptionalMemberExpression_optional(n),
                },
            }
        ),
        NodeKind::LogicalExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::LogicalExpression {
                    left: cvt_node_ptr(cvt, hermes_get_LogicalExpression_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_LogicalExpression_right(n)),
                    operator: cvt_enum(hermes_get_LogicalExpression_operator(n)),
                },
            }
        ),
        NodeKind::ConditionalExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ConditionalExpression {
                    test: cvt_node_ptr(cvt, hermes_get_ConditionalExpression_test(n)),
                    alternate: cvt_node_ptr(cvt, hermes_get_ConditionalExpression_alternate(n)),
                    consequent: cvt_node_ptr(cvt, hermes_get_ConditionalExpression_consequent(n)),
                },
            }
        ),
        NodeKind::BinaryExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BinaryExpression {
                    left: cvt_node_ptr(cvt, hermes_get_BinaryExpression_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_BinaryExpression_right(n)),
                    operator: cvt_enum(hermes_get_BinaryExpression_operator(n)),
                },
            }
        ),
        NodeKind::Directive => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Directive {
                    value: cvt_node_ptr(cvt, hermes_get_Directive_value(n)),
                },
            }
        ),
        NodeKind::DirectiveLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DirectiveLiteral {
                    value: cvt_string(hermes_get_DirectiveLiteral_value(n)),
                },
            }
        ),
        NodeKind::Identifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Identifier {
                    name: cvt_label(hermes_get_Identifier_name(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_Identifier_typeAnnotation(n)),
                    optional: hermes_get_Identifier_optional(n),
                },
            }
        ),
        NodeKind::PrivateName => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::PrivateName {
                    id: cvt_node_ptr(cvt, hermes_get_PrivateName_id(n)),
                },
            }
        ),
        NodeKind::MetaProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::MetaProperty {
                    meta: cvt_node_ptr(cvt, hermes_get_MetaProperty_meta(n)),
                    property: cvt_node_ptr(cvt, hermes_get_MetaProperty_property(n)),
                },
            }
        ),
        NodeKind::SwitchCase => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::SwitchCase {
                    test: cvt_node_ptr_opt(cvt, hermes_get_SwitchCase_test(n)),
                    consequent: cvt_node_list(cvt, hermes_get_SwitchCase_consequent(n)),
                },
            }
        ),
        NodeKind::CatchClause => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::CatchClause {
                    param: cvt_node_ptr_opt(cvt, hermes_get_CatchClause_param(n)),
                    body: cvt_node_ptr(cvt, hermes_get_CatchClause_body(n)),
                },
            }
        ),
        NodeKind::VariableDeclarator => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::VariableDeclarator {
                    init: cvt_node_ptr_opt(cvt, hermes_get_VariableDeclarator_init(n)),
                    id: cvt_node_ptr(cvt, hermes_get_VariableDeclarator_id(n)),
                },
            }
        ),
        NodeKind::VariableDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::VariableDeclaration {
                    kind: cvt_enum(hermes_get_VariableDeclaration_kind(n)),
                    declarations: cvt_node_list(cvt, hermes_get_VariableDeclaration_declarations(n)),
                },
            }
        ),
        NodeKind::TemplateLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TemplateLiteral {
                    quasis: cvt_node_list(cvt, hermes_get_TemplateLiteral_quasis(n)),
                    expressions: cvt_node_list(cvt, hermes_get_TemplateLiteral_expressions(n)),
                },
            }
        ),
        NodeKind::TaggedTemplateExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TaggedTemplateExpression {
                    tag: cvt_node_ptr(cvt, hermes_get_TaggedTemplateExpression_tag(n)),
                    quasi: cvt_node_ptr(cvt, hermes_get_TaggedTemplateExpression_quasi(n)),
                },
            }
        ),
        NodeKind::TemplateElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TemplateElement {
                    tail: hermes_get_TemplateElement_tail(n),
                    cooked: cvt_string_opt(hermes_get_TemplateElement_cooked(n)),
                    raw: cvt_string(hermes_get_TemplateElement_raw(n)),
                },
            }
        ),
        NodeKind::Property => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Property {
                    key: cvt_node_ptr(cvt, hermes_get_Property_key(n)),
                    value: cvt_node_ptr(cvt, hermes_get_Property_value(n)),
                    kind: cvt_enum(hermes_get_Property_kind(n)),
                    computed: hermes_get_Property_computed(n),
                    method: hermes_get_Property_method(n),
                    shorthand: hermes_get_Property_shorthand(n),
                },
            }
        ),
        NodeKind::ClassDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassDeclaration {
                    id: cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_typeParameters(n)),
                    super_class: cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_superClass(n)),
                    super_type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ClassDeclaration_superTypeParameters(n)),
                    implements: cvt_node_list(cvt, hermes_get_ClassDeclaration_implements(n)),
                    decorators: cvt_node_list(cvt, hermes_get_ClassDeclaration_decorators(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ClassDeclaration_body(n)),
                },
            }
        ),
        NodeKind::ClassExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassExpression {
                    id: cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_typeParameters(n)),
                    super_class: cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_superClass(n)),
                    super_type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ClassExpression_superTypeParameters(n)),
                    implements: cvt_node_list(cvt, hermes_get_ClassExpression_implements(n)),
                    decorators: cvt_node_list(cvt, hermes_get_ClassExpression_decorators(n)),
                    body: cvt_node_ptr(cvt, hermes_get_ClassExpression_body(n)),
                },
            }
        ),
        NodeKind::ClassBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassBody {
                    body: cvt_node_list(cvt, hermes_get_ClassBody_body(n)),
                },
            }
        ),
        NodeKind::ClassProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassProperty {
                    key: cvt_node_ptr(cvt, hermes_get_ClassProperty_key(n)),
                    value: cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_value(n)),
                    computed: hermes_get_ClassProperty_computed(n),
                    is_static: hermes_get_ClassProperty_static(n),
                    declare: hermes_get_ClassProperty_declare(n),
                    optional: hermes_get_ClassProperty_optional(n),
                    variance: cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_variance(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_ClassProperty_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::ClassPrivateProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassPrivateProperty {
                    key: cvt_node_ptr(cvt, hermes_get_ClassPrivateProperty_key(n)),
                    value: cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_value(n)),
                    is_static: hermes_get_ClassPrivateProperty_static(n),
                    declare: hermes_get_ClassPrivateProperty_declare(n),
                    optional: hermes_get_ClassPrivateProperty_optional(n),
                    variance: cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_variance(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_ClassPrivateProperty_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::MethodDefinition => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::MethodDefinition {
                    key: cvt_node_ptr(cvt, hermes_get_MethodDefinition_key(n)),
                    value: cvt_node_ptr(cvt, hermes_get_MethodDefinition_value(n)),
                    kind: cvt_enum(hermes_get_MethodDefinition_kind(n)),
                    computed: hermes_get_MethodDefinition_computed(n),
                    is_static: hermes_get_MethodDefinition_static(n),
                },
            }
        ),
        NodeKind::ImportDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportDeclaration {
                    specifiers: cvt_node_list(cvt, hermes_get_ImportDeclaration_specifiers(n)),
                    source: cvt_node_ptr(cvt, hermes_get_ImportDeclaration_source(n)),
                    attributes: cvt_node_list_opt(cvt, hermes_get_ImportDeclaration_attributes(n)),
                    import_kind: cvt_enum(hermes_get_ImportDeclaration_importKind(n)),
                },
            }
        ),
        NodeKind::ImportSpecifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportSpecifier {
                    imported: cvt_node_ptr(cvt, hermes_get_ImportSpecifier_imported(n)),
                    local: cvt_node_ptr(cvt, hermes_get_ImportSpecifier_local(n)),
                    import_kind: cvt_enum(hermes_get_ImportSpecifier_importKind(n)),
                },
            }
        ),
        NodeKind::ImportDefaultSpecifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportDefaultSpecifier {
                    local: cvt_node_ptr(cvt, hermes_get_ImportDefaultSpecifier_local(n)),
                },
            }
        ),
        NodeKind::ImportNamespaceSpecifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportNamespaceSpecifier {
                    local: cvt_node_ptr(cvt, hermes_get_ImportNamespaceSpecifier_local(n)),
                },
            }
        ),
        NodeKind::ImportAttribute => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ImportAttribute {
                    key: cvt_node_ptr(cvt, hermes_get_ImportAttribute_key(n)),
                    value: cvt_node_ptr(cvt, hermes_get_ImportAttribute_value(n)),
                },
            }
        ),
        NodeKind::ExportNamedDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportNamedDeclaration {
                    declaration: cvt_node_ptr_opt(cvt, hermes_get_ExportNamedDeclaration_declaration(n)),
                    specifiers: cvt_node_list(cvt, hermes_get_ExportNamedDeclaration_specifiers(n)),
                    source: cvt_node_ptr_opt(cvt, hermes_get_ExportNamedDeclaration_source(n)),
                    export_kind: cvt_enum(hermes_get_ExportNamedDeclaration_exportKind(n)),
                },
            }
        ),
        NodeKind::ExportSpecifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportSpecifier {
                    exported: cvt_node_ptr(cvt, hermes_get_ExportSpecifier_exported(n)),
                    local: cvt_node_ptr(cvt, hermes_get_ExportSpecifier_local(n)),
                },
            }
        ),
        NodeKind::ExportNamespaceSpecifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportNamespaceSpecifier {
                    exported: cvt_node_ptr(cvt, hermes_get_ExportNamespaceSpecifier_exported(n)),
                },
            }
        ),
        NodeKind::ExportDefaultDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportDefaultDeclaration {
                    declaration: cvt_node_ptr(cvt, hermes_get_ExportDefaultDeclaration_declaration(n)),
                },
            }
        ),
        NodeKind::ExportAllDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExportAllDeclaration {
                    source: cvt_node_ptr(cvt, hermes_get_ExportAllDeclaration_source(n)),
                    export_kind: cvt_enum(hermes_get_ExportAllDeclaration_exportKind(n)),
                },
            }
        ),
        NodeKind::ObjectPattern => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectPattern {
                    properties: cvt_node_list(cvt, hermes_get_ObjectPattern_properties(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_ObjectPattern_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::ArrayPattern => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayPattern {
                    elements: cvt_node_list(cvt, hermes_get_ArrayPattern_elements(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_ArrayPattern_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::RestElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::RestElement {
                    argument: cvt_node_ptr(cvt, hermes_get_RestElement_argument(n)),
                },
            }
        ),
        NodeKind::AssignmentPattern => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::AssignmentPattern {
                    left: cvt_node_ptr(cvt, hermes_get_AssignmentPattern_left(n)),
                    right: cvt_node_ptr(cvt, hermes_get_AssignmentPattern_right(n)),
                },
            }
        ),
        NodeKind::JSXIdentifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXIdentifier {
                    name: cvt_label(hermes_get_JSXIdentifier_name(n)),
                },
            }
        ),
        NodeKind::JSXMemberExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXMemberExpression {
                    object: cvt_node_ptr(cvt, hermes_get_JSXMemberExpression_object(n)),
                    property: cvt_node_ptr(cvt, hermes_get_JSXMemberExpression_property(n)),
                },
            }
        ),
        NodeKind::JSXNamespacedName => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXNamespacedName {
                    namespace: cvt_node_ptr(cvt, hermes_get_JSXNamespacedName_namespace(n)),
                    name: cvt_node_ptr(cvt, hermes_get_JSXNamespacedName_name(n)),
                },
            }
        ),
        NodeKind::JSXEmptyExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXEmptyExpression {
                },
            }
        ),
        NodeKind::JSXExpressionContainer => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXExpressionContainer {
                    expression: cvt_node_ptr(cvt, hermes_get_JSXExpressionContainer_expression(n)),
                },
            }
        ),
        NodeKind::JSXSpreadChild => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXSpreadChild {
                    expression: cvt_node_ptr(cvt, hermes_get_JSXSpreadChild_expression(n)),
                },
            }
        ),
        NodeKind::JSXOpeningElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXOpeningElement {
                    name: cvt_node_ptr(cvt, hermes_get_JSXOpeningElement_name(n)),
                    attributes: cvt_node_list(cvt, hermes_get_JSXOpeningElement_attributes(n)),
                    self_closing: hermes_get_JSXOpeningElement_selfClosing(n),
                },
            }
        ),
        NodeKind::JSXClosingElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXClosingElement {
                    name: cvt_node_ptr(cvt, hermes_get_JSXClosingElement_name(n)),
                },
            }
        ),
        NodeKind::JSXAttribute => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXAttribute {
                    name: cvt_node_ptr(cvt, hermes_get_JSXAttribute_name(n)),
                    value: cvt_node_ptr_opt(cvt, hermes_get_JSXAttribute_value(n)),
                },
            }
        ),
        NodeKind::JSXSpreadAttribute => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXSpreadAttribute {
                    argument: cvt_node_ptr(cvt, hermes_get_JSXSpreadAttribute_argument(n)),
                },
            }
        ),
        NodeKind::JSXText => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXText {
                    value: cvt_string(hermes_get_JSXText_value(n)),
                    raw: cvt_string(hermes_get_JSXText_raw(n)),
                },
            }
        ),
        NodeKind::JSXElement => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXElement {
                    opening_element: cvt_node_ptr(cvt, hermes_get_JSXElement_openingElement(n)),
                    children: cvt_node_list(cvt, hermes_get_JSXElement_children(n)),
                    closing_element: cvt_node_ptr_opt(cvt, hermes_get_JSXElement_closingElement(n)),
                },
            }
        ),
        NodeKind::JSXFragment => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXFragment {
                    opening_fragment: cvt_node_ptr(cvt, hermes_get_JSXFragment_openingFragment(n)),
                    children: cvt_node_list(cvt, hermes_get_JSXFragment_children(n)),
                    closing_fragment: cvt_node_ptr(cvt, hermes_get_JSXFragment_closingFragment(n)),
                },
            }
        ),
        NodeKind::JSXOpeningFragment => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXOpeningFragment {
                },
            }
        ),
        NodeKind::JSXClosingFragment => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::JSXClosingFragment {
                },
            }
        ),
        NodeKind::ExistsTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ExistsTypeAnnotation {
                },
            }
        ),
        NodeKind::EmptyTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EmptyTypeAnnotation {
                },
            }
        ),
        NodeKind::StringTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::StringTypeAnnotation {
                },
            }
        ),
        NodeKind::NumberTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NumberTypeAnnotation {
                },
            }
        ),
        NodeKind::StringLiteralTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::StringLiteralTypeAnnotation {
                    value: cvt_string(hermes_get_StringLiteralTypeAnnotation_value(n)),
                },
            }
        ),
        NodeKind::NumberLiteralTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NumberLiteralTypeAnnotation {
                    value: hermes_get_NumberLiteralTypeAnnotation_value(n),
                    raw: cvt_label(hermes_get_NumberLiteralTypeAnnotation_raw(n)),
                },
            }
        ),
        NodeKind::BooleanTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanTypeAnnotation {
                },
            }
        ),
        NodeKind::BooleanLiteralTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::BooleanLiteralTypeAnnotation {
                    value: hermes_get_BooleanLiteralTypeAnnotation_value(n),
                    raw: cvt_label(hermes_get_BooleanLiteralTypeAnnotation_raw(n)),
                },
            }
        ),
        NodeKind::NullLiteralTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NullLiteralTypeAnnotation {
                },
            }
        ),
        NodeKind::SymbolTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::SymbolTypeAnnotation {
                },
            }
        ),
        NodeKind::AnyTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::AnyTypeAnnotation {
                },
            }
        ),
        NodeKind::MixedTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::MixedTypeAnnotation {
                },
            }
        ),
        NodeKind::VoidTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::VoidTypeAnnotation {
                },
            }
        ),
        NodeKind::FunctionTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionTypeAnnotation {
                    params: cvt_node_list(cvt, hermes_get_FunctionTypeAnnotation_params(n)),
                    this: cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_this(n)),
                    return_type: cvt_node_ptr(cvt, hermes_get_FunctionTypeAnnotation_returnType(n)),
                    rest: cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_rest(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeAnnotation_typeParameters(n)),
                },
            }
        ),
        NodeKind::FunctionTypeParam => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::FunctionTypeParam {
                    name: cvt_node_ptr_opt(cvt, hermes_get_FunctionTypeParam_name(n)),
                    type_annotation: cvt_node_ptr(cvt, hermes_get_FunctionTypeParam_typeAnnotation(n)),
                    optional: hermes_get_FunctionTypeParam_optional(n),
                },
            }
        ),
        NodeKind::NullableTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::NullableTypeAnnotation {
                    type_annotation: cvt_node_ptr(cvt, hermes_get_NullableTypeAnnotation_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::QualifiedTypeIdentifier => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::QualifiedTypeIdentifier {
                    qualification: cvt_node_ptr(cvt, hermes_get_QualifiedTypeIdentifier_qualification(n)),
                    id: cvt_node_ptr(cvt, hermes_get_QualifiedTypeIdentifier_id(n)),
                },
            }
        ),
        NodeKind::TypeofTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeofTypeAnnotation {
                    argument: cvt_node_ptr(cvt, hermes_get_TypeofTypeAnnotation_argument(n)),
                },
            }
        ),
        NodeKind::TupleTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TupleTypeAnnotation {
                    types: cvt_node_list(cvt, hermes_get_TupleTypeAnnotation_types(n)),
                },
            }
        ),
        NodeKind::ArrayTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ArrayTypeAnnotation {
                    element_type: cvt_node_ptr(cvt, hermes_get_ArrayTypeAnnotation_elementType(n)),
                },
            }
        ),
        NodeKind::UnionTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::UnionTypeAnnotation {
                    types: cvt_node_list(cvt, hermes_get_UnionTypeAnnotation_types(n)),
                },
            }
        ),
        NodeKind::IntersectionTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::IntersectionTypeAnnotation {
                    types: cvt_node_list(cvt, hermes_get_IntersectionTypeAnnotation_types(n)),
                },
            }
        ),
        NodeKind::GenericTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::GenericTypeAnnotation {
                    id: cvt_node_ptr(cvt, hermes_get_GenericTypeAnnotation_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_GenericTypeAnnotation_typeParameters(n)),
                },
            }
        ),
        NodeKind::IndexedAccessType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::IndexedAccessType {
                    object_type: cvt_node_ptr(cvt, hermes_get_IndexedAccessType_objectType(n)),
                    index_type: cvt_node_ptr(cvt, hermes_get_IndexedAccessType_indexType(n)),
                },
            }
        ),
        NodeKind::OptionalIndexedAccessType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::OptionalIndexedAccessType {
                    object_type: cvt_node_ptr(cvt, hermes_get_OptionalIndexedAccessType_objectType(n)),
                    index_type: cvt_node_ptr(cvt, hermes_get_OptionalIndexedAccessType_indexType(n)),
                    optional: hermes_get_OptionalIndexedAccessType_optional(n),
                },
            }
        ),
        NodeKind::InterfaceTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceTypeAnnotation {
                    extends: cvt_node_list(cvt, hermes_get_InterfaceTypeAnnotation_extends(n)),
                    body: cvt_node_ptr_opt(cvt, hermes_get_InterfaceTypeAnnotation_body(n)),
                },
            }
        ),
        NodeKind::TypeAlias => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeAlias {
                    id: cvt_node_ptr(cvt, hermes_get_TypeAlias_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TypeAlias_typeParameters(n)),
                    right: cvt_node_ptr(cvt, hermes_get_TypeAlias_right(n)),
                },
            }
        ),
        NodeKind::OpaqueType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::OpaqueType {
                    id: cvt_node_ptr(cvt, hermes_get_OpaqueType_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_OpaqueType_typeParameters(n)),
                    impltype: cvt_node_ptr(cvt, hermes_get_OpaqueType_impltype(n)),
                    supertype: cvt_node_ptr_opt(cvt, hermes_get_OpaqueType_supertype(n)),
                },
            }
        ),
        NodeKind::InterfaceDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_InterfaceDeclaration_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_InterfaceDeclaration_typeParameters(n)),
                    extends: cvt_node_list(cvt, hermes_get_InterfaceDeclaration_extends(n)),
                    body: cvt_node_ptr(cvt, hermes_get_InterfaceDeclaration_body(n)),
                },
            }
        ),
        NodeKind::DeclareTypeAlias => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareTypeAlias {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareTypeAlias_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_DeclareTypeAlias_typeParameters(n)),
                    right: cvt_node_ptr(cvt, hermes_get_DeclareTypeAlias_right(n)),
                },
            }
        ),
        NodeKind::DeclareOpaqueType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareOpaqueType {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareOpaqueType_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_typeParameters(n)),
                    impltype: cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_impltype(n)),
                    supertype: cvt_node_ptr_opt(cvt, hermes_get_DeclareOpaqueType_supertype(n)),
                },
            }
        ),
        NodeKind::DeclareInterface => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareInterface {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareInterface_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_DeclareInterface_typeParameters(n)),
                    extends: cvt_node_list(cvt, hermes_get_DeclareInterface_extends(n)),
                    body: cvt_node_ptr(cvt, hermes_get_DeclareInterface_body(n)),
                },
            }
        ),
        NodeKind::DeclareClass => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareClass {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareClass_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_DeclareClass_typeParameters(n)),
                    extends: cvt_node_list(cvt, hermes_get_DeclareClass_extends(n)),
                    implements: cvt_node_list(cvt, hermes_get_DeclareClass_implements(n)),
                    mixins: cvt_node_list(cvt, hermes_get_DeclareClass_mixins(n)),
                    body: cvt_node_ptr(cvt, hermes_get_DeclareClass_body(n)),
                },
            }
        ),
        NodeKind::DeclareFunction => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareFunction {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareFunction_id(n)),
                    predicate: cvt_node_ptr_opt(cvt, hermes_get_DeclareFunction_predicate(n)),
                },
            }
        ),
        NodeKind::DeclareVariable => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareVariable {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareVariable_id(n)),
                },
            }
        ),
        NodeKind::DeclareExportDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareExportDeclaration {
                    declaration: cvt_node_ptr_opt(cvt, hermes_get_DeclareExportDeclaration_declaration(n)),
                    specifiers: cvt_node_list(cvt, hermes_get_DeclareExportDeclaration_specifiers(n)),
                    source: cvt_node_ptr_opt(cvt, hermes_get_DeclareExportDeclaration_source(n)),
                    default: hermes_get_DeclareExportDeclaration_default(n),
                },
            }
        ),
        NodeKind::DeclareExportAllDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareExportAllDeclaration {
                    source: cvt_node_ptr(cvt, hermes_get_DeclareExportAllDeclaration_source(n)),
                },
            }
        ),
        NodeKind::DeclareModule => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareModule {
                    id: cvt_node_ptr(cvt, hermes_get_DeclareModule_id(n)),
                    body: cvt_node_ptr(cvt, hermes_get_DeclareModule_body(n)),
                    kind: cvt_label(hermes_get_DeclareModule_kind(n)),
                },
            }
        ),
        NodeKind::DeclareModuleExports => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclareModuleExports {
                    type_annotation: cvt_node_ptr(cvt, hermes_get_DeclareModuleExports_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::InterfaceExtends => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::InterfaceExtends {
                    id: cvt_node_ptr(cvt, hermes_get_InterfaceExtends_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_InterfaceExtends_typeParameters(n)),
                },
            }
        ),
        NodeKind::ClassImplements => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ClassImplements {
                    id: cvt_node_ptr(cvt, hermes_get_ClassImplements_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_ClassImplements_typeParameters(n)),
                },
            }
        ),
        NodeKind::TypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeAnnotation {
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TypeAnnotation_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::ObjectTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeAnnotation {
                    properties: cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_properties(n)),
                    indexers: cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_indexers(n)),
                    call_properties: cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_callProperties(n)),
                    internal_slots: cvt_node_list(cvt, hermes_get_ObjectTypeAnnotation_internalSlots(n)),
                    inexact: hermes_get_ObjectTypeAnnotation_inexact(n),
                    exact: hermes_get_ObjectTypeAnnotation_exact(n),
                },
            }
        ),
        NodeKind::ObjectTypeProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeProperty {
                    key: cvt_node_ptr(cvt, hermes_get_ObjectTypeProperty_key(n)),
                    value: cvt_node_ptr(cvt, hermes_get_ObjectTypeProperty_value(n)),
                    method: hermes_get_ObjectTypeProperty_method(n),
                    optional: hermes_get_ObjectTypeProperty_optional(n),
                    is_static: hermes_get_ObjectTypeProperty_static(n),
                    proto: hermes_get_ObjectTypeProperty_proto(n),
                    variance: cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeProperty_variance(n)),
                    kind: cvt_label(hermes_get_ObjectTypeProperty_kind(n)),
                },
            }
        ),
        NodeKind::ObjectTypeSpreadProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeSpreadProperty {
                    argument: cvt_node_ptr(cvt, hermes_get_ObjectTypeSpreadProperty_argument(n)),
                },
            }
        ),
        NodeKind::ObjectTypeInternalSlot => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeInternalSlot {
                    id: cvt_node_ptr(cvt, hermes_get_ObjectTypeInternalSlot_id(n)),
                    value: cvt_node_ptr(cvt, hermes_get_ObjectTypeInternalSlot_value(n)),
                    optional: hermes_get_ObjectTypeInternalSlot_optional(n),
                    is_static: hermes_get_ObjectTypeInternalSlot_static(n),
                    method: hermes_get_ObjectTypeInternalSlot_method(n),
                },
            }
        ),
        NodeKind::ObjectTypeCallProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeCallProperty {
                    value: cvt_node_ptr(cvt, hermes_get_ObjectTypeCallProperty_value(n)),
                    is_static: hermes_get_ObjectTypeCallProperty_static(n),
                },
            }
        ),
        NodeKind::ObjectTypeIndexer => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::ObjectTypeIndexer {
                    id: cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeIndexer_id(n)),
                    key: cvt_node_ptr(cvt, hermes_get_ObjectTypeIndexer_key(n)),
                    value: cvt_node_ptr(cvt, hermes_get_ObjectTypeIndexer_value(n)),
                    is_static: hermes_get_ObjectTypeIndexer_static(n),
                    variance: cvt_node_ptr_opt(cvt, hermes_get_ObjectTypeIndexer_variance(n)),
                },
            }
        ),
        NodeKind::Variance => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::Variance {
                    kind: cvt_label(hermes_get_Variance_kind(n)),
                },
            }
        ),
        NodeKind::TypeParameterDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameterDeclaration {
                    params: cvt_node_list(cvt, hermes_get_TypeParameterDeclaration_params(n)),
                },
            }
        ),
        NodeKind::TypeParameter => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameter {
                    name: cvt_label(hermes_get_TypeParameter_name(n)),
                    bound: cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_bound(n)),
                    variance: cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_variance(n)),
                    default: cvt_node_ptr_opt(cvt, hermes_get_TypeParameter_default(n)),
                },
            }
        ),
        NodeKind::TypeParameterInstantiation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeParameterInstantiation {
                    params: cvt_node_list(cvt, hermes_get_TypeParameterInstantiation_params(n)),
                },
            }
        ),
        NodeKind::TypeCastExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TypeCastExpression {
                    expression: cvt_node_ptr(cvt, hermes_get_TypeCastExpression_expression(n)),
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TypeCastExpression_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::InferredPredicate => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::InferredPredicate {
                },
            }
        ),
        NodeKind::DeclaredPredicate => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::DeclaredPredicate {
                    value: cvt_node_ptr(cvt, hermes_get_DeclaredPredicate_value(n)),
                },
            }
        ),
        NodeKind::EnumDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_EnumDeclaration_id(n)),
                    body: cvt_node_ptr(cvt, hermes_get_EnumDeclaration_body(n)),
                },
            }
        ),
        NodeKind::EnumStringBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumStringBody {
                    members: cvt_node_list(cvt, hermes_get_EnumStringBody_members(n)),
                    explicit_type: hermes_get_EnumStringBody_explicitType(n),
                    has_unknown_members: hermes_get_EnumStringBody_hasUnknownMembers(n),
                },
            }
        ),
        NodeKind::EnumNumberBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumNumberBody {
                    members: cvt_node_list(cvt, hermes_get_EnumNumberBody_members(n)),
                    explicit_type: hermes_get_EnumNumberBody_explicitType(n),
                    has_unknown_members: hermes_get_EnumNumberBody_hasUnknownMembers(n),
                },
            }
        ),
        NodeKind::EnumBooleanBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumBooleanBody {
                    members: cvt_node_list(cvt, hermes_get_EnumBooleanBody_members(n)),
                    explicit_type: hermes_get_EnumBooleanBody_explicitType(n),
                    has_unknown_members: hermes_get_EnumBooleanBody_hasUnknownMembers(n),
                },
            }
        ),
        NodeKind::EnumSymbolBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumSymbolBody {
                    members: cvt_node_list(cvt, hermes_get_EnumSymbolBody_members(n)),
                    has_unknown_members: hermes_get_EnumSymbolBody_hasUnknownMembers(n),
                },
            }
        ),
        NodeKind::EnumDefaultedMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumDefaultedMember {
                    id: cvt_node_ptr(cvt, hermes_get_EnumDefaultedMember_id(n)),
                },
            }
        ),
        NodeKind::EnumStringMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumStringMember {
                    id: cvt_node_ptr(cvt, hermes_get_EnumStringMember_id(n)),
                    init: cvt_node_ptr(cvt, hermes_get_EnumStringMember_init(n)),
                },
            }
        ),
        NodeKind::EnumNumberMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumNumberMember {
                    id: cvt_node_ptr(cvt, hermes_get_EnumNumberMember_id(n)),
                    init: cvt_node_ptr(cvt, hermes_get_EnumNumberMember_init(n)),
                },
            }
        ),
        NodeKind::EnumBooleanMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::EnumBooleanMember {
                    id: cvt_node_ptr(cvt, hermes_get_EnumBooleanMember_id(n)),
                    init: cvt_node_ptr(cvt, hermes_get_EnumBooleanMember_init(n)),
                },
            }
        ),
        NodeKind::TSTypeAnnotation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAnnotation {
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TSTypeAnnotation_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::TSAnyKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSAnyKeyword {
                },
            }
        ),
        NodeKind::TSNumberKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSNumberKeyword {
                },
            }
        ),
        NodeKind::TSBooleanKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSBooleanKeyword {
                },
            }
        ),
        NodeKind::TSStringKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSStringKeyword {
                },
            }
        ),
        NodeKind::TSSymbolKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSSymbolKeyword {
                },
            }
        ),
        NodeKind::TSVoidKeyword => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSVoidKeyword {
                },
            }
        ),
        NodeKind::TSThisType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSThisType {
                },
            }
        ),
        NodeKind::TSLiteralType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSLiteralType {
                    literal: cvt_node_ptr(cvt, hermes_get_TSLiteralType_literal(n)),
                },
            }
        ),
        NodeKind::TSIndexedAccessType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIndexedAccessType {
                    object_type: cvt_node_ptr(cvt, hermes_get_TSIndexedAccessType_objectType(n)),
                    index_type: cvt_node_ptr(cvt, hermes_get_TSIndexedAccessType_indexType(n)),
                },
            }
        ),
        NodeKind::TSArrayType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSArrayType {
                    element_type: cvt_node_ptr(cvt, hermes_get_TSArrayType_elementType(n)),
                },
            }
        ),
        NodeKind::TSTypeReference => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeReference {
                    type_name: cvt_node_ptr(cvt, hermes_get_TSTypeReference_typeName(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSTypeReference_typeParameters(n)),
                },
            }
        ),
        NodeKind::TSQualifiedName => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSQualifiedName {
                    left: cvt_node_ptr(cvt, hermes_get_TSQualifiedName_left(n)),
                    right: cvt_node_ptr_opt(cvt, hermes_get_TSQualifiedName_right(n)),
                },
            }
        ),
        NodeKind::TSFunctionType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSFunctionType {
                    params: cvt_node_list(cvt, hermes_get_TSFunctionType_params(n)),
                    return_type: cvt_node_ptr(cvt, hermes_get_TSFunctionType_returnType(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSFunctionType_typeParameters(n)),
                },
            }
        ),
        NodeKind::TSConstructorType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSConstructorType {
                    params: cvt_node_list(cvt, hermes_get_TSConstructorType_params(n)),
                    return_type: cvt_node_ptr(cvt, hermes_get_TSConstructorType_returnType(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSConstructorType_typeParameters(n)),
                },
            }
        ),
        NodeKind::TSTypePredicate => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypePredicate {
                    parameter_name: cvt_node_ptr(cvt, hermes_get_TSTypePredicate_parameterName(n)),
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TSTypePredicate_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::TSTupleType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTupleType {
                    element_types: cvt_node_list(cvt, hermes_get_TSTupleType_elementTypes(n)),
                },
            }
        ),
        NodeKind::TSTypeAssertion => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAssertion {
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TSTypeAssertion_typeAnnotation(n)),
                    expression: cvt_node_ptr(cvt, hermes_get_TSTypeAssertion_expression(n)),
                },
            }
        ),
        NodeKind::TSAsExpression => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSAsExpression {
                    expression: cvt_node_ptr(cvt, hermes_get_TSAsExpression_expression(n)),
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TSAsExpression_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::TSParameterProperty => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSParameterProperty {
                    parameter: cvt_node_ptr(cvt, hermes_get_TSParameterProperty_parameter(n)),
                    accessibility: cvt_label_opt(hermes_get_TSParameterProperty_accessibility(n)),
                    readonly: hermes_get_TSParameterProperty_readonly(n),
                    is_static: hermes_get_TSParameterProperty_static(n),
                    export: hermes_get_TSParameterProperty_export(n),
                },
            }
        ),
        NodeKind::TSTypeAliasDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeAliasDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_TSTypeAliasDeclaration_id(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSTypeAliasDeclaration_typeParameters(n)),
                    type_annotation: cvt_node_ptr(cvt, hermes_get_TSTypeAliasDeclaration_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::TSInterfaceDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_TSInterfaceDeclaration_id(n)),
                    body: cvt_node_ptr(cvt, hermes_get_TSInterfaceDeclaration_body(n)),
                    extends: cvt_node_list(cvt, hermes_get_TSInterfaceDeclaration_extends(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSInterfaceDeclaration_typeParameters(n)),
                },
            }
        ),
        NodeKind::TSInterfaceHeritage => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceHeritage {
                    expression: cvt_node_ptr(cvt, hermes_get_TSInterfaceHeritage_expression(n)),
                    type_parameters: cvt_node_ptr_opt(cvt, hermes_get_TSInterfaceHeritage_typeParameters(n)),
                },
            }
        ),
        NodeKind::TSInterfaceBody => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSInterfaceBody {
                    body: cvt_node_list(cvt, hermes_get_TSInterfaceBody_body(n)),
                },
            }
        ),
        NodeKind::TSEnumDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSEnumDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_TSEnumDeclaration_id(n)),
                    members: cvt_node_list(cvt, hermes_get_TSEnumDeclaration_members(n)),
                },
            }
        ),
        NodeKind::TSEnumMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSEnumMember {
                    id: cvt_node_ptr(cvt, hermes_get_TSEnumMember_id(n)),
                    initializer: cvt_node_ptr_opt(cvt, hermes_get_TSEnumMember_initializer(n)),
                },
            }
        ),
        NodeKind::TSModuleDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleDeclaration {
                    id: cvt_node_ptr(cvt, hermes_get_TSModuleDeclaration_id(n)),
                    body: cvt_node_ptr(cvt, hermes_get_TSModuleDeclaration_body(n)),
                },
            }
        ),
        NodeKind::TSModuleBlock => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleBlock {
                    body: cvt_node_list(cvt, hermes_get_TSModuleBlock_body(n)),
                },
            }
        ),
        NodeKind::TSModuleMember => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSModuleMember {
                    id: cvt_node_ptr(cvt, hermes_get_TSModuleMember_id(n)),
                    initializer: cvt_node_ptr_opt(cvt, hermes_get_TSModuleMember_initializer(n)),
                },
            }
        ),
        NodeKind::TSTypeParameterDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameterDeclaration {
                    params: cvt_node_list(cvt, hermes_get_TSTypeParameterDeclaration_params(n)),
                },
            }
        ),
        NodeKind::TSTypeParameter => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameter {
                    name: cvt_node_ptr(cvt, hermes_get_TSTypeParameter_name(n)),
                    constraint: cvt_node_ptr_opt(cvt, hermes_get_TSTypeParameter_constraint(n)),
                    default: cvt_node_ptr_opt(cvt, hermes_get_TSTypeParameter_default(n)),
                },
            }
        ),
        NodeKind::TSTypeParameterInstantiation => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeParameterInstantiation {
                    params: cvt_node_list(cvt, hermes_get_TSTypeParameterInstantiation_params(n)),
                },
            }
        ),
        NodeKind::TSUnionType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSUnionType {
                    types: cvt_node_list(cvt, hermes_get_TSUnionType_types(n)),
                },
            }
        ),
        NodeKind::TSIntersectionType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIntersectionType {
                    types: cvt_node_list(cvt, hermes_get_TSIntersectionType_types(n)),
                },
            }
        ),
        NodeKind::TSTypeQuery => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeQuery {
                    expr_name: cvt_node_ptr(cvt, hermes_get_TSTypeQuery_exprName(n)),
                },
            }
        ),
        NodeKind::TSConditionalType => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSConditionalType {
                    extends_type: cvt_node_ptr(cvt, hermes_get_TSConditionalType_extendsType(n)),
                    check_type: cvt_node_ptr(cvt, hermes_get_TSConditionalType_checkType(n)),
                    true_type: cvt_node_ptr(cvt, hermes_get_TSConditionalType_trueType(n)),
                    false_t_ype: cvt_node_ptr(cvt, hermes_get_TSConditionalType_falseTYpe(n)),
                },
            }
        ),
        NodeKind::TSTypeLiteral => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSTypeLiteral {
                    members: cvt_node_list(cvt, hermes_get_TSTypeLiteral_members(n)),
                },
            }
        ),
        NodeKind::TSPropertySignature => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSPropertySignature {
                    key: cvt_node_ptr(cvt, hermes_get_TSPropertySignature_key(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_TSPropertySignature_typeAnnotation(n)),
                    initializer: cvt_node_ptr_opt(cvt, hermes_get_TSPropertySignature_initializer(n)),
                    optional: hermes_get_TSPropertySignature_optional(n),
                    computed: hermes_get_TSPropertySignature_computed(n),
                    readonly: hermes_get_TSPropertySignature_readonly(n),
                    is_static: hermes_get_TSPropertySignature_static(n),
                    export: hermes_get_TSPropertySignature_export(n),
                },
            }
        ),
        NodeKind::TSMethodSignature => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSMethodSignature {
                    key: cvt_node_ptr(cvt, hermes_get_TSMethodSignature_key(n)),
                    params: cvt_node_list(cvt, hermes_get_TSMethodSignature_params(n)),
                    return_type: cvt_node_ptr_opt(cvt, hermes_get_TSMethodSignature_returnType(n)),
                    computed: hermes_get_TSMethodSignature_computed(n),
                },
            }
        ),
        NodeKind::TSIndexSignature => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSIndexSignature {
                    parameters: cvt_node_list(cvt, hermes_get_TSIndexSignature_parameters(n)),
                    type_annotation: cvt_node_ptr_opt(cvt, hermes_get_TSIndexSignature_typeAnnotation(n)),
                },
            }
        ),
        NodeKind::TSCallSignatureDeclaration => ast::NodePtr::new(
            ast::Node {
                range,
                kind: ast::NodeKind::TSCallSignatureDeclaration {
                    params: cvt_node_list(cvt, hermes_get_TSCallSignatureDeclaration_params(n)),
                    return_type: cvt_node_ptr_opt(cvt, hermes_get_TSCallSignatureDeclaration_returnType(n)),
                },
            }
        ),
        _ => panic!("Invalid node kind")
    }
}
