version: 2.1

# The Linux jobs include hacks and flags that restricts parallelism, and re-try
# with less parallelism on failure.
#
# This is because CircleCI Linux jobs have 2 CPUs and 4GB RAM allocated via
# cgroups, but run on machines that advertise 36 CPUs and 68GB RAM. This means
# that most build tools will spawn 36 jobs and quickly choke to death. Even
# with just 4 jobs, 4GB may be too little, so we retry serially on failure.
#
# Comments saying "see top comment" refer to this.

orbs:
  win: circleci/windows-tools@0.0.4

workflows:
  version: 2
  build:
    jobs:
      - android
      - linux
      - macos
      - windows
      - npm:
          requires:
            - android
            - linux
            - macos
            - windows
      - test-linux
      - test-macos
      - test-react-native-linux:
          requires:
            - npm
      - test-react-native-windows:
          requires:
            - npm

jobs:
  android:
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      - HERMES_WS_DIR: /tmp/hermes
      - TERM: dumb
    steps:
      - checkout
      - run:
          name: Set up workspace and install dependencies
          command: |
            yes | sdkmanager "ndk-bundle"  &
            yes | sdkmanager "cmake;3.6.4111459" &
            mkdir -p "$HERMES_WS_DIR" "$HERMES_WS_DIR/output"
            ln -sf "$PWD" "$HERMES_WS_DIR/hermes"
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build libicu-dev
            wait
            sudo cp /usr/bin/ninja /usr/bin/ninja.real
            # See top comment
            printf '%s\n' '#!/bin/sh' 'ninja.real -j4 "$@" || ninja.real -j1 "$@"' | sudo tee /usr/bin/ninja
            ln -sf /usr/bin/ninja /opt/android/sdk/cmake/3.6.4111459/bin/ninja
      - run:
          name: Build LLVM
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/build_llvm.py llvm llvm_build
      - run:
          name: Crosscompile LLVM
          command: |
            export ANDROID_SDK="$ANDROID_HOME"
            export ANDROID_NDK="$ANDROID_HOME/ndk-bundle"
            cd "$HERMES_WS_DIR" && hermes/utils/crosscompile_llvm.sh
      - run:
          name: Build Hermes Compiler
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/configure.py ./build ./llvm_build ./llvm
            # Build the Hermes compiler so that the cross compiler build can
            # access it to build the VM
            cmake --build ./build --target hermesc
      - run:
          name: Build Hermes for Android
          command: |
            export ANDROID_SDK="$ANDROID_HOME"
            export ANDROID_NDK="$ANDROID_HOME/ndk-bundle"
            cd "$HERMES_WS_DIR/hermes/android" && ./gradlew githubRelease
      - run:
          name: Copy artifacts
          command: |
            cd "$HERMES_WS_DIR"
            cp "build_android/distributions"/hermes-runtime-android-*.tar.gz "output"
      - run:
          name: Checksum artifacts
          command: |
            cd "$HERMES_WS_DIR/output"
            for file in *
            do
              sha256sum "$file" > "$file.sha256"
            done
      - store_artifacts:
          path: /tmp/hermes/output/
      - persist_to_workspace:
          root: /tmp/hermes/output/
          paths:
            - .

  linux:
    docker:
      - image: debian:stretch
    environment:
      - HERMES_WS_DIR: /tmp/hermes
      - TERM: dumb
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -y \
                sudo git openssh-client cmake ninja-build python \
                build-essential libreadline-dev libicu-dev
      - checkout
      - run:
          name: Set up workspace
          command: |
            mkdir -p "$HERMES_WS_DIR" "$HERMES_WS_DIR/output"
            ln -sf "$PWD" "$HERMES_WS_DIR/hermes"
            sudo cp /usr/bin/ninja /usr/bin/ninja.real
            # See top comment
            printf '%s\n' '#!/bin/sh' 'ninja.real -j4 "$@" || ninja.real -j1 "$@"' | sudo tee /usr/bin/ninja
      - run:
          name: Build LLVM
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/build_llvm.py --distribute llvm llvm_build
      - run:
          name: Build Hermes for Linux
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/configure.py --static-link --distribute
            cd build_release
            ninja github-cli-release
      - run:
          name: Copy artifacts
          command: |
            cd "$HERMES_WS_DIR"
            cp "build_release/github"/hermes-cli-*.tar.gz "output"
      - run:
          name: Checksum artifacts
          command: |
            cd "$HERMES_WS_DIR/output"
            for file in *
            do
              sha256sum "$file" > "$file.sha256"
            done
      - store_artifacts:
          path: /tmp/hermes/output/
      - persist_to_workspace:
          root: /tmp/hermes/output/
          paths:
            - .

  test-linux:
    # execution-time-limit.js and sampling-profiler.js segfault in statically
    # linked release mode, so this job is just a duplicate of the Linux job
    # that builds in dynamically linked debug mode
    docker:
      - image: debian:stretch
    environment:
      - HERMES_WS_DIR: /tmp/hermes
      - TERM: dumb
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -y \
                sudo git openssh-client cmake ninja-build python \
                build-essential libreadline-dev libicu-dev zip python3
      - checkout
      - run:
          name: Set up workspace
          command: |
            mkdir -p "$HERMES_WS_DIR"
            ln -sf "$PWD" "$HERMES_WS_DIR/hermes"
            sudo cp /usr/bin/ninja /usr/bin/ninja.real
            # See top comment
            printf '%s\n' '#!/bin/sh' 'ninja.real -j4 "$@" || ninja.real -j1 "$@"' | sudo tee /usr/bin/ninja
      - run:
          name: Build LLVM in debug mode
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/build_llvm.py llvm llvm_build
      - run:
          name: Run Hermes regression tests
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/configure.py
            cd build
            ninja check-hermes

  macos:
    macos:
      xcode: "10.0.0"
    environment:
      - HERMES_WS_DIR: /tmp/hermes
      - TERM: dumb
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install cmake ninja
      - run:
          name: Set up workspace
          command: |
            mkdir -p "$HERMES_WS_DIR" "$HERMES_WS_DIR/output"
            ln -sf "$PWD" "$HERMES_WS_DIR/hermes"
      - run:
          name: Build LLVM
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/build_llvm.py --distribute llvm llvm_build
      - run:
          name: Build Hermes for macOS
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/configure.py --distribute
            cmake --build ./build_release --target github-cli-release
      - run:
          name: Copy artifacts
          command: |
            cd "$HERMES_WS_DIR"
            cp "build_release/github"/hermes-cli-*.tar.gz "output"
      - run:
          name: Checksum artifacts
          command: |
            cd "$HERMES_WS_DIR/output"
            for file in *
            do
              shasum -a 256 "$file" > "$file.sha256"
            done
      - store_artifacts:
          path: /tmp/hermes/output/
      - persist_to_workspace:
          root: /tmp/hermes/output/
          paths:
            - .

  test-macos:
    # CheckedMalloc.Death fails in release mode, so build a debug version
    macos:
      xcode: "10.0.0"
    environment:
      - HERMES_WS_DIR: /tmp/hermes
      - TERM: dumb
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install cmake ninja
      - run:
          name: Set up workspace
          command: |
            mkdir -p "$HERMES_WS_DIR"
            ln -sf "$PWD" "$HERMES_WS_DIR/hermes"
      - run:
          name: Build LLVM in debug mode
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/build_llvm.py llvm llvm_build
      - run:
          name: Run MacOS regression tests in debug mode
          command: |
            cd "$HERMES_WS_DIR"
            hermes/utils/build/configure.py
            cmake --build ./build --target check-hermes

  windows:
    executor:
      name: win/preview-default
      shell: powershell.exe
    environment:
      - HERMES_WS_DIR: 'C:\tmp\hermes'
      - ICU_URL: 'https://github.com/unicode-org/icu/releases/download/release-64-2/icu4c-64_2-Win64-MSVC2017.zip'
      - MSBUILD_DIR: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin'
      - CMAKE_DIR: 'C:\Program Files\CMake\bin'
    steps:
      - checkout

      - run:
          name: Set up workspace
          command: |
            New-Item -ItemType Directory $Env:HERMES_WS_DIR
            New-Item -ItemType Directory $Env:HERMES_WS_DIR\icu
            New-Item -ItemType Directory $Env:HERMES_WS_DIR\output
            New-Item -ItemType Directory $Env:HERMES_WS_DIR\deps
            New-Item -ItemType SymbolicLink -Target . -Path $Env:HERMES_WS_DIR -Name hermes

      - run:
          name: Download ICU
          command: |
            cd $Env:HERMES_WS_DIR\icu
            # If Invoke-WebRequest shows a progress bar, it will fail with
            #   Win32 internal error "Access is denied" 0x5 occurred [...]
            $progressPreference = 'silentlyContinue'
            Invoke-WebRequest -Uri "$Env:ICU_URL" -OutFile "icu.zip"
            Expand-Archive -Path "icu.zip" -DestinationPath "."

      - run:
          name: Install dependencies
          command: |
            choco install --no-progress cmake
            if (-not $?) { throw "Failed to install CMake" }
            choco install --no-progress python3
            if (-not $?) { throw "Failed to install Python" }

            # dotnetfx-4.8.0 requires a reboot, so pin an earlier version
            choco install --no-progress dotnetfx --version 4.7.2.20180712
            if (-not $?) { throw "Failed to install dotnetfx" }

            # Choco installs of VS2019 are so slow that CircleCI times it out
            # after 10 minutes of perceived inactivity. There's no verbose flag,
            # so we'll just print something occasionally to bump the timer.
            $install = Start-Job {
              choco install visualstudio2019buildtools --package-parameters "--allWorkloads --includeRecommended --passive --locale en-US"
            }
            $eta = 15
            while ($install.State -eq "Running") {
                Write-Host "Waiting for visualstudio2019buildtools. ETA $eta minutes..."
                $install | Wait-Job -timeout 60
                $eta -= 1
            }
            $install | Receive-Job
            if (-not $?) { throw "Failed to install visualstudio2019buildtools" }
            choco install visualstudio2019-workload-vctools
            if (-not $?) { throw "Failed to install visualstudio2019-workload-vctools" }

      - run:
          name: Build LLVM
          command: |
            $Env:PATH += ";$Env:CMAKE_DIR;$Env:MSBUILD_DIR"
            cd $Env:HERMES_WS_DIR
            hermes\utils\build\build_llvm.py --build-system='Visual Studio 16 2019' --distribute llvm llvm_build
            if (-not $?) { throw "Failed to build LLVM" }

      - run:
          name: Assemble Windows runtime dependencies
          command: |
            cd $Env:HERMES_WS_DIR
            Copy-Item -Path "icu\bin64\icu*.dll" -Destination "deps"

      - run:
          name: Build Hermes for Windows
          command: |
            $Env:PATH += ";$Env:CMAKE_DIR;$Env:MSBUILD_DIR"
            $Env:ICU_ROOT = "$Env:HERMES_WS_DIR\icu"
            cd $Env:HERMES_WS_DIR
            hermes\utils\build\configure.py --build-system='Visual Studio 16 2019' --cmake-flags="-DLLVM_ENABLE_LTO=OFF -DHERMES_ENABLE_WIN10_ICU_FALLBACK=OFF -DHERMES_GITHUB_RESOURCE_DIR=$Env:HERMES_WS_DIR\deps" --distribute
            if (-not $?) { throw "Failed to configure Hermes" }
            cd build_release
            cmake --build . --target github-cli-release --config Release
            if (-not $?) { throw "Failed to build Hermes" }

      - run:
          name: Copy artifacts
          command: |
            cd $Env:HERMES_WS_DIR
            Copy-Item -Path "build_release\github\hermes-cli-*.tar.gz" -Destination "output"

      - run:
          name: Checksum artifacts
          command: |
            cd $Env:HERMES_WS_DIR\output
            foreach($file in Get-ChildItem) {
              $hash = Get-FileHash -Path $file -Algorithm SHA256
              Write-Output ($hash.Hash + "  " + $file.Name) |
                  Out-File -Encoding ASCII -FilePath ($file.Name +".sha256")
            }

      - store_artifacts:
          path: c:\tmp\hermes\output

      - persist_to_workspace:
          root: c:\tmp\hermes\output
          paths:
            - .

  npm:
    docker:
      - image: ubuntu:19.04
    environment:
      - yarn: yarnpkg
      - TERM: dumb
    steps:
      - run:
          name: Install certificates required to attach workspace
          command: |
            apt-get update
            apt-get install -y ca-certificates

      - run:
          name: Temporarily work around CircleCI workspace attachment bug
          command: |
            # As of 2019-09-10, CircleCI fails to attach Windows workspaces without this hack
            cp /usr/bin/tar /usr/bin/tar.real
            printf '%s\n' '#!/bin/sh' 'exec tar.real --no-same-owner "$@"' > /usr/bin/tar

      - attach_workspace:
          at: /tmp/hermes/input

      - run:
          name: Install dependencies and set up
          command: |
            mkdir -p /tmp/hermes/output
            apt-get install -y git npm yarnpkg

      - checkout

      - run:
          name: Build NPM
          command: |
            cd npm
            cp /tmp/hermes/input/* .
            $yarn install
            $yarn pack

      - run:
          name: Copy artifacts
          command: |
            cd npm
            cp hermes-engine-*.tgz /tmp/hermes/output
            # Also copy the other packages for the sole purpose of not having
            # to visit multiple jobs pages to download all release artifacts
            cp hermes-cli-*.tar.gz /tmp/hermes/output

      - run:
          name: Checksum artifacts
          command: |
            cd /tmp/hermes/output
            for file in *
            do
              sha256sum "$file" > "$file.sha256"
            done

      - store_artifacts:
          path: /tmp/hermes/output

      - persist_to_workspace:
          root: /tmp/hermes/output
          paths:
            - .

  test-react-native-linux:
    docker:
      - image: circleci/android:api-28-ndk
    environment:
      - TERM: dumb
    steps:
      - run:
          name: Set up workspace and install dependencies
          command: |
            yes | sdkmanager "ndk-bundle"  &
            sudo apt-get update
            sudo apt-get install -y nodejs npm rsync
            wait

      - attach_workspace:
          at: /tmp/hermes/input

      - run:
          name: Check out React Native tree
          command: |
            git clone https://github.com/facebook/react-native .

      - run:
          name: Install NPMs including new hermes-engine
          command: |
            npm install
            npm install /tmp/hermes/input/hermes-engine-*.tgz

      # Optimally we'd run the RN E2E tests, but they've been disabled for a
      # while and have bitrotted. RNTester Release is the only thing that is
      # continuously built for Android, so that's really the only thing we can
      # reliably build at this time.
      - run:
          name: Build RNTester with Hermes in Release mode
          command: |
            # See top comment
            ./gradlew -Pjobs=4 --max-workers=1 ":RNTester:android:app:assembleHermesRelease"


  test-react-native-windows:
    executor:
      name: win/preview-default
      shell: powershell.exe
    environment:
      - TERM: dumb
    steps:
      - run:
          name: Set up workspace and install dependencies
          command: |
            # Install node 10 because 12.11.1 triggers a bug:
            # https://github.com/facebook/react-native/issues/26598
            choco install nodejs-lts
            # The jdk11 choco package is broken as of 2019-10-02
            choco install jdk8
            choco install android-sdk
            choco install python3
            choco install vcredist2015
            refreshenv
            sdkmanager "ndk-bundle"

      - attach_workspace:
          at: c:\tmp\hermes\input

      - run:
          name: Check out React Native tree
          command: |
            git clone https://github.com/facebook/react-native .

      - run:
          name: Install NPMs including new hermes-engine
          command: |
            npm install
            npm install (Get-Item c:\tmp\hermes\input\hermes-engine-*.tgz)

      # RN e2e tests didn't run on Windows even when they worked, so just make
      # sure we can build RNTester and invoke the Windows cli compiler.
      - run:
          name: Build RNTester with Hermes in Release mode
          command: |
            # Run without daemon, since it'll keep the job alive
            .\gradlew --no-daemon ":RNTester:android:app:assembleHermesRelease"
            if (-not $?) { throw "Failed to build RNTester" }
