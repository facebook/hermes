From 3af13c23401d3a545a6d5c209ce811d36a59efb8 Mon Sep 17 00:00:00 2001
From: ddetlefs <ddetlefs@devvm012.ftw2.facebook.com>
Date: Fri, 17 May 2019 10:36:01 -0700
Subject: [PATCH] Changes to LLVM to compile for Hermes.

Summary:

Test Plan:

Reviewers:

Subscribers:

Tasks:

Tags:
---
 CMakeLists.txt                     | 4 ++++
 include/llvm/ADT/StringExtras.h    | 2 ++
 include/llvm/Support/raw_ostream.h | 2 +-
 lib/Support/ErrorHandling.cpp      | 3 +++
 lib/Support/Signals.cpp            | 2 ++
 lib/Support/Unix/Signals.inc       | 2 +-
 6 files changed, 13 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3e7a9dd8988..4c055ac8200 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -32,6 +32,10 @@ if ((CMAKE_GENERATOR MATCHES "Visual Studio") AND (CMAKE_GENERATOR_TOOLSET STREQ
                   "host compiler, pass -Thost=x64 on the CMake command line.")
 endif()
 
+if (LLVM_STATIC_LIBS_FOR_ANDROID)
+  set(CMAKE_TRY_COMPILE_TARGET_TYPE "STATIC_LIBRARY")
+endif()
+
 project(LLVM
   VERSION ${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}
   LANGUAGES C CXX ASM)
diff --git a/include/llvm/ADT/StringExtras.h b/include/llvm/ADT/StringExtras.h
index 60a03633a8a..499d6ea8096 100644
--- a/include/llvm/ADT/StringExtras.h
+++ b/include/llvm/ADT/StringExtras.h
@@ -217,9 +217,11 @@ inline bool to_float(const Twine &T, double &Num) {
   return detail::to_float(T, Num, strtod);
 }
 
+#ifndef __ANDROID__
 inline bool to_float(const Twine &T, long double &Num) {
   return detail::to_float(T, Num, strtold);
 }
+#endif
 
 inline std::string utostr(uint64_t X, bool isNeg = false) {
   char Buffer[21];
diff --git a/include/llvm/Support/raw_ostream.h b/include/llvm/Support/raw_ostream.h
index 9a86f3a371e..432cc2ba0cf 100644
--- a/include/llvm/Support/raw_ostream.h
+++ b/include/llvm/Support/raw_ostream.h
@@ -346,7 +346,7 @@ public:
   explicit raw_pwrite_stream(bool Unbuffered = false)
       : raw_ostream(Unbuffered) {}
   void pwrite(const char *Ptr, size_t Size, uint64_t Offset) {
-#ifndef NDBEBUG
+#ifndef NDEBUG
     uint64_t Pos = tell();
     // /dev/null always reports a pos of 0, so we cannot perform this check
     // in that case.
diff --git a/lib/Support/ErrorHandling.cpp b/lib/Support/ErrorHandling.cpp
index 21712c5c039..e18c0bd037d 100644
--- a/lib/Support/ErrorHandling.cpp
+++ b/lib/Support/ErrorHandling.cpp
@@ -198,6 +198,8 @@ void llvm::install_out_of_memory_new_handler() {
   }
 }
 
+// T42835532: LLVM shouldn't be changing the global new handler by default.
+#if 0
 // Static object that causes installation of 'out_of_memory_new_handler' before
 // execution of 'main'.
 static class NewHandlerInstaller {
@@ -207,6 +209,7 @@ public:
   }
 } new_handler_installer;
 #endif
+#endif
 
 void llvm::llvm_unreachable_internal(const char *msg, const char *file,
                                      unsigned line) {
diff --git a/lib/Support/Signals.cpp b/lib/Support/Signals.cpp
index 6534ff69b84..720105f3d18 100644
--- a/lib/Support/Signals.cpp
+++ b/lib/Support/Signals.cpp
@@ -38,10 +38,12 @@ using namespace llvm;
 
 // Use explicit storage to avoid accessing cl::opt in a signal handler.
 static bool DisableSymbolicationFlag = false;
+#if 0
 static cl::opt<bool, true>
     DisableSymbolication("disable-symbolication",
                          cl::desc("Disable symbolizing crash backtraces."),
                          cl::location(DisableSymbolicationFlag), cl::Hidden);
+#endif
 
 // Callbacks to run in signal handler must be lock-free because a signal handler
 // could be running as we add new callbacks. We don't add unbounded numbers of
diff --git a/lib/Support/Unix/Signals.inc b/lib/Support/Unix/Signals.inc
index de26695d64e..df10abbb3d2 100644
--- a/lib/Support/Unix/Signals.inc
+++ b/lib/Support/Unix/Signals.inc
@@ -47,7 +47,7 @@
 #include "llvm/Support/raw_ostream.h"
 #include <algorithm>
 #include <string>
-#ifdef HAVE_BACKTRACE
+#if defined(HAVE_BACKTRACE) && ENABLE_BACKTRACES
 # include BACKTRACE_HEADER         // For backtrace().
 #endif
 #if HAVE_SIGNAL_H
-- 
2.17.1

