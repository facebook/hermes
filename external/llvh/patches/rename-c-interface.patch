diff --git a/include/llvh-c/Error.h b/include/llvh-c/Error.h
--- a/include/llvh-c/Error.h
+++ b/include/llvh-c/Error.h
@@ -34,7 +34,7 @@
  * Returns the type id for the given error instance, which must be a failure
  * value (i.e. non-null).
  */
-LLVMErrorTypeId LLVMGetErrorTypeId(LLVMErrorRef Err);
+LLVMErrorTypeId LLVHGetErrorTypeId(LLVMErrorRef Err);
 
 /**
  * Dispose of the given error without handling it. This operation consumes the
@@ -42,7 +42,7 @@
  * Note: This method *only* needs to be called if the error is not being passed
  * to some other consuming operation, e.g. LLVMGetErrorMessage.
  */
-void LLVMConsumeError(LLVMErrorRef Err);
+void LLVHConsumeError(LLVMErrorRef Err);
 
 /**
  * Returns the given string's error message. This operation consumes the error,
@@ -50,17 +50,17 @@
  * The caller is responsible for disposing of the string by calling
  * LLVMDisposeErrorMessage.
  */
-char *LLVMGetErrorMessage(LLVMErrorRef Err);
+char *LLVHGetErrorMessage(LLVMErrorRef Err);
 
 /**
  * Dispose of the given error message.
  */
-void LLVMDisposeErrorMessage(char *ErrMsg);
+void LLVHDisposeErrorMessage(char *ErrMsg);
 
 /**
  * Returns the type id for llvm StringError.
  */
-LLVMErrorTypeId LLVMGetStringErrorTypeId();
+LLVMErrorTypeId LLVHGetStringErrorTypeId();
 
 #ifdef __cplusplus
 }
diff --git a/include/llvh-c/ErrorHandling.h b/include/llvh-c/ErrorHandling.h
--- a/include/llvh-c/ErrorHandling.h
+++ b/include/llvh-c/ErrorHandling.h
@@ -27,20 +27,20 @@
  * function allows you to install a callback that will be invoked prior to the
  * call to exit(1).
  */
-void LLVMInstallFatalErrorHandler(LLVMFatalErrorHandler Handler);
+void LLVHInstallFatalErrorHandler(LLVMFatalErrorHandler Handler);
 
 /**
  * Reset the fatal error handler. This resets LLVM's fatal error handling
  * behavior to the default.
  */
-void LLVMResetFatalErrorHandler(void);
+void LLVHResetFatalErrorHandler(void);
 
 /**
  * Enable LLVM's built-in stack trace code. This intercepts the OS's crash
  * signals and prints which component of LLVM you were in at the time if the
  * crash.
  */
-void LLVMEnablePrettyStackTrace(void);
+void LLVHEnablePrettyStackTrace(void);
 
 #ifdef __cplusplus
 }
diff --git a/lib/Support/CommandLine.cpp b/lib/Support/CommandLine.cpp
--- a/lib/Support/CommandLine.cpp
+++ b/lib/Support/CommandLine.cpp
@@ -2237,8 +2237,3 @@
   GlobalParser->ResetAllOptionOccurrences();
 }
 
-void LLVMParseCommandLineOptions(int argc, const char *const *argv,
-                                 const char *Overview) {
-  llvh::cl::ParseCommandLineOptions(argc, argv, StringRef(Overview),
-                                    &llvh::nulls());
-}
diff --git a/lib/Support/Error.cpp b/lib/Support/Error.cpp
--- a/lib/Support/Error.cpp
+++ b/lib/Support/Error.cpp
@@ -148,13 +148,13 @@
 
 } // end namespace llvh
 
-LLVMErrorTypeId LLVMGetErrorTypeId(LLVMErrorRef Err) {
+LLVMErrorTypeId LLVHGetErrorTypeId(LLVMErrorRef Err) {
   return reinterpret_cast<ErrorInfoBase *>(Err)->dynamicClassID();
 }
 
-void LLVMConsumeError(LLVMErrorRef Err) { consumeError(unwrap(Err)); }
+void LLVHConsumeError(LLVMErrorRef Err) { consumeError(unwrap(Err)); }
 
-char *LLVMGetErrorMessage(LLVMErrorRef Err) {
+char *LLVHGetErrorMessage(LLVMErrorRef Err) {
   std::string Tmp = toString(unwrap(Err));
   char *ErrMsg = new char[Tmp.size() + 1];
   memcpy(ErrMsg, Tmp.data(), Tmp.size());
@@ -162,9 +162,9 @@
   return ErrMsg;
 }
 
-void LLVMDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
+void LLVHDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
 
-LLVMErrorTypeId LLVMGetStringErrorTypeId() {
+LLVMErrorTypeId LLVHGetStringErrorTypeId() {
   return reinterpret_cast<void *>(&StringError::ID);
 }
 
diff --git a/lib/Support/ErrorHandling.cpp b/lib/Support/ErrorHandling.cpp
--- a/lib/Support/ErrorHandling.cpp
+++ b/lib/Support/ErrorHandling.cpp
@@ -237,12 +237,12 @@
   handler(reason.c_str());
 }
 
-void LLVMInstallFatalErrorHandler(LLVMFatalErrorHandler Handler) {
+void LLVHInstallFatalErrorHandler(LLVMFatalErrorHandler Handler) {
   install_fatal_error_handler(bindingsErrorHandler,
                               LLVM_EXTENSION reinterpret_cast<void *>(Handler));
 }
 
-void LLVMResetFatalErrorHandler() {
+void LLVHResetFatalErrorHandler() {
   remove_fatal_error_handler();
 }
 
diff --git a/lib/Support/PrettyStackTrace.cpp b/lib/Support/PrettyStackTrace.cpp
--- a/lib/Support/PrettyStackTrace.cpp
+++ b/lib/Support/PrettyStackTrace.cpp
@@ -205,6 +205,6 @@
 #endif
 }
 
-void LLVMEnablePrettyStackTrace() {
+void LLVHEnablePrettyStackTrace() {
   EnablePrettyStackTrace();
 }
diff --git a/lib/Support/Regex.cpp b/lib/Support/Regex.cpp
--- a/lib/Support/Regex.cpp
+++ b/lib/Support/Regex.cpp
@@ -36,7 +36,7 @@
     flags |= REG_NEWLINE;
   if (!(Flags & BasicRegex))
     flags |= REG_EXTENDED;
-  error = llvm_regcomp(preg, regex.data(), flags|REG_PEND);
+  error = llvh_regcomp(preg, regex.data(), flags|REG_PEND);
 }
 
 Regex::Regex(Regex &&regex) {
@@ -48,7 +48,7 @@
 
 Regex::~Regex() {
   if (preg) {
-    llvm_regfree(preg);
+    llvh_regfree(preg);
     delete preg;
   }
 }
@@ -57,10 +57,10 @@
   if (!error)
     return true;
 
-  size_t len = llvm_regerror(error, preg, nullptr, 0);
+  size_t len = llvh_regerror(error, preg, nullptr, 0);
 
   Error.resize(len - 1);
-  llvm_regerror(error, preg, &Error[0], len);
+  llvh_regerror(error, preg, &Error[0], len);
   return false;
 }
 
@@ -82,7 +82,7 @@
   pm[0].rm_so = 0;
   pm[0].rm_eo = String.size();
 
-  int rc = llvm_regexec(preg, String.data(), nmatch, pm.data(), REG_STARTEND);
+  int rc = llvh_regexec(preg, String.data(), nmatch, pm.data(), REG_STARTEND);
 
   if (rc == REG_NOMATCH)
     return false;
diff --git a/lib/Support/regcomp.c b/lib/Support/regcomp.c
--- a/lib/Support/regcomp.c
+++ b/lib/Support/regcomp.c
@@ -286,10 +286,10 @@
 #endif
 
 /*
- - llvm_regcomp - interface for parser and compilation
+ - llvh_regcomp - interface for parser and compilation
  */
 int				/* 0 success, otherwise REG_something */
-llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
+llvh_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
 {
 	struct parse pa;
 	struct re_guts *g;
@@ -374,14 +374,14 @@
 	preg->re_g = g;
 	preg->re_magic = MAGIC1;
 #ifndef REDEBUG
-	/* not debugging, so can't rely on the assert() in llvm_regexec() */
+	/* not debugging, so can't rely on the assert() in llvh_regexec() */
 	if (g->iflags&REGEX_BAD)
 		SETERROR(REG_ASSERT);
 #endif
 
 	/* win or lose, we're done */
 	if (p->error != 0)	/* lose */
-		llvm_regfree(preg);
+		llvh_regfree(preg);
 	return(p->error);
 }
 
@@ -1352,7 +1352,7 @@
 	}
 	cs->multis = np;
 
-	llvm_strlcpy(cs->multis + oldend - 1, cp, cs->smultis - oldend + 1);
+	llvh_strlcpy(cs->multis + oldend - 1, cp, cs->smultis - oldend + 1);
 }
 
 /*
diff --git a/lib/Support/regerror.c b/lib/Support/regerror.c
--- a/lib/Support/regerror.c
+++ b/lib/Support/regerror.c
@@ -56,7 +56,7 @@
 	const char *name;
 	const char *explain;
 } rerrs[] = {
-	{ REG_NOMATCH,	"REG_NOMATCH",	"llvm_regexec() failed to match" },
+	{ REG_NOMATCH,	"REG_NOMATCH",	"llvh_regexec() failed to match" },
 	{ REG_BADPAT,	"REG_BADPAT",	"invalid regular expression" },
 	{ REG_ECOLLATE,	"REG_ECOLLATE",	"invalid collating element" },
 	{ REG_ECTYPE,	"REG_ECTYPE",	"invalid character class" },
@@ -76,12 +76,12 @@
 };
 
 /*
- - llvm_regerror - the interface to error numbers
- = extern size_t llvm_regerror(int, const llvm_regex_t *, char *, size_t);
+ - llvh_regerror - the interface to error numbers
+ = extern size_t llvh_regerror(int, const llvm_regex_t *, char *, size_t);
  */
 /* ARGSUSED */
 size_t
-llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
+llvh_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
 {
 	struct rerr *r;
 	size_t len;
@@ -99,7 +99,7 @@
 		if (errcode&REG_ITOA) {
 			if (r->code != 0) {
 				assert(strlen(r->name) < sizeof(convbuf));
-				(void) llvm_strlcpy(convbuf, r->name, sizeof convbuf);
+				(void) llvh_strlcpy(convbuf, r->name, sizeof convbuf);
 			} else
 				(void)snprintf(convbuf, sizeof convbuf,
 				    "REG_0x%x", target);
@@ -110,7 +110,7 @@
 
 	len = strlen(s) + 1;
 	if (errbuf_size > 0) {
-		llvm_strlcpy(errbuf, s, errbuf_size);
+		llvh_strlcpy(errbuf, s, errbuf_size);
 	}
 
 	return(len);
diff --git a/lib/Support/regex2.h b/lib/Support/regex2.h
--- a/lib/Support/regex2.h
+++ b/lib/Support/regex2.h
@@ -119,7 +119,7 @@
 #define	CHadd(cs, c)	((cs)->ptr[(uch)(c)] |= (cs)->mask, (cs)->hash += (c))
 #define	CHsub(cs, c)	((cs)->ptr[(uch)(c)] &= ~(cs)->mask, (cs)->hash -= (c))
 #define	CHIN(cs, c)	((cs)->ptr[(uch)(c)] & (cs)->mask)
-#define	MCadd(p, cs, cp)	mcadd(p, cs, cp)	/* llvm_regcomp() internal fns */
+#define	MCadd(p, cs, cp)	mcadd(p, cs, cp)	/* llvh_regcomp() internal fns */
 #define	MCsub(p, cs, cp)	mcsub(p, cs, cp)
 #define	MCin(p, cs, cp)	mcin(p, cs, cp)
 
@@ -137,7 +137,7 @@
 	int ncsets;		/* number of csets in use */
 	cset *sets;		/* -> cset [ncsets] */
 	uch *setbits;		/* -> uch[csetsize][ncsets/CHAR_BIT] */
-	int cflags;		/* copy of llvm_regcomp() cflags argument */
+	int cflags;		/* copy of llvh_regcomp() cflags argument */
 	sopno nstates;		/* = number of sops */
 	sopno firststate;	/* the initial OEND (normally 0) */
 	sopno laststate;	/* the final OEND */
diff --git a/lib/Support/regex_impl.h b/lib/Support/regex_impl.h
--- a/lib/Support/regex_impl.h
+++ b/lib/Support/regex_impl.h
@@ -52,7 +52,7 @@
   struct re_guts *re_g;	/* none of your business :-) */
 } llvm_regex_t;
 
-/* llvm_regcomp() flags */
+/* llvh_regcomp() flags */
 #define	REG_BASIC	0000
 #define	REG_EXTENDED	0001
 #define	REG_ICASE	0002
@@ -62,7 +62,7 @@
 #define	REG_PEND	0040
 #define	REG_DUMP	0200
 
-/* llvm_regerror() flags */
+/* llvh_regerror() flags */
 #define	REG_NOMATCH	 1
 #define	REG_BADPAT	 2
 #define	REG_ECOLLATE	 3
@@ -82,7 +82,7 @@
 #define	REG_ATOI	255	/* convert name to number (!) */
 #define	REG_ITOA	0400	/* convert number to name (!) */
 
-/* llvm_regexec() flags */
+/* llvh_regexec() flags */
 #define	REG_NOTBOL	00001
 #define	REG_NOTEOL	00002
 #define	REG_STARTEND	00004
@@ -94,12 +94,12 @@
 extern "C" {
 #endif
 
-int	llvm_regcomp(llvm_regex_t *, const char *, int);
-size_t	llvm_regerror(int, const llvm_regex_t *, char *, size_t);
-int	llvm_regexec(const llvm_regex_t *, const char *, size_t,
+int	llvh_regcomp(llvm_regex_t *, const char *, int);
+size_t	llvh_regerror(int, const llvm_regex_t *, char *, size_t);
+int	llvh_regexec(const llvm_regex_t *, const char *, size_t,
                      llvm_regmatch_t [], int);
-void	llvm_regfree(llvm_regex_t *);
-size_t  llvm_strlcpy(char *dst, const char *src, size_t siz);
+void	llvh_regfree(llvm_regex_t *);
+size_t  llvh_strlcpy(char *dst, const char *src, size_t siz);
 
 #ifdef __cplusplus
 }
diff --git a/lib/Support/regexec.c b/lib/Support/regexec.c
--- a/lib/Support/regexec.c
+++ b/lib/Support/regexec.c
@@ -36,7 +36,7 @@
  */
 
 /*
- * the outer shell of llvm_regexec()
+ * the outer shell of llvh_regexec()
  *
  * This file includes engine.inc *twice*, after muchos fiddling with the
  * macros that code uses.  This lets the same code operate on two different
@@ -55,7 +55,7 @@
 
 /* macros for manipulating states, small version */
 /* FIXME: 'states' is assumed as 'long' on small version. */
-#define	states1	long		/* for later use in llvm_regexec() decision */
+#define	states1	long		/* for later use in llvh_regexec() decision */
 #define	states	states1
 #define	CLEAR(v)	((v) = 0)
 #define	SET0(v, n)	((v) &= ~((unsigned long)1 << (n)))
@@ -131,14 +131,14 @@
 #include "regengine.inc"
 
 /*
- - llvm_regexec - interface for matching
+ - llvh_regexec - interface for matching
  *
  * We put this here so we can exploit knowledge of the state representation
  * when choosing which matcher to call.  Also, by this point the matchers
  * have been prototyped.
  */
 int				/* 0 success, REG_NOMATCH failure */
-llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
+llvh_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
              llvm_regmatch_t pmatch[], int eflags)
 {
 	struct re_guts *g = preg->re_g;
diff --git a/lib/Support/regfree.c b/lib/Support/regfree.c
--- a/lib/Support/regfree.c
+++ b/lib/Support/regfree.c
@@ -44,10 +44,10 @@
 #include "regex2.h"
 
 /*
- - llvm_regfree - free everything
+ - llvh_regfree - free everything
  */
 void
-llvm_regfree(llvm_regex_t *preg)
+llvh_regfree(llvm_regex_t *preg)
 {
 	struct re_guts *g;
 
diff --git a/lib/Support/regstrlcpy.c b/lib/Support/regstrlcpy.c
--- a/lib/Support/regstrlcpy.c
+++ b/lib/Support/regstrlcpy.c
@@ -26,7 +26,7 @@
  * Returns strlen(src); if retval >= siz, truncation occurred.
  */
 size_t
-llvm_strlcpy(char *dst, const char *src, size_t siz)
+llvh_strlcpy(char *dst, const char *src, size_t siz)
 {
 	char *d = dst;
 	const char *s = src;
